{
    "v": 1,
    "data": [{
        "id": "d4",
        "matchUrl": "http://cpgu.mfc-karelia.ru:8181/cpgu/formEditor?eid=custom*",
        "rules": [{
                "type": "fileInject",
                "fileName": "FormEditor-betterProps.js",
                "file": "/*********************************************** \r\n * Улучшенное поле Свойства в редакторе услуг  *\r\n *    Переменные теперь можно редактировать    *\r\n *       КЛАДР теперь содержит стратегию       *\r\n *      Убрал бесполезные пункты стратегии     *\r\n *    Скрипт MFC-service считывает нажатие     *\r\n *  кнопки \"применить\" с помощью этого файла   *\r\n ***********************************************/\r\n\r\nconsole.log(\"[betterprops] trying to start...\")\r\nopenFormEditor = function () {\r\n    let mainPanel;\r\n    let params = Ext.Object.fromQueryString(location.search);\r\n    let formEid = params['eid'];\r\n    let formLid = params['lid'];\r\n\r\n    let showServiceTree = function () {\r\n        Ext.create('Ext.window.Window', {\r\n            id: 'ChooseCustomServiceDepartmentWindow',\r\n            title: 'Выберите папку',\r\n            height: '90%',\r\n            width: '90%',\r\n            modal: true,\r\n            layout: 'fit',\r\n            buttons: [{\r\n                text: 'Закрыть',\r\n                handler: function (btn) {\r\n                    btn.up('window').close();\r\n                }\r\n            }],\r\n            items: [{\r\n                xtype: 'DepartmentGrid',\r\n                rowActions: [{\r\n                    callbackName: 'chooseCustomServiceDepartment',\r\n                    actionName: 'Выбрать',\r\n                    recordToArguments: function (record) {\r\n                        return [record.get('departmentId'), record.get('title')];\r\n                    }\r\n                }],\r\n                listeners: {\r\n                    itemdblclick: function (treePanel, record) {\r\n                        chooseCustomServiceDepartment(record.get('departmentId'), record.get('title'));\r\n                    }\r\n                }\r\n            }]\r\n        }).show();\r\n    };\r\n\r\n    let showParentServiceGrid = function () {\r\n        Ext.create('Ext.window.Window', {\r\n            id: 'ChooseParentServiceWindow',\r\n            title: 'Выберите родительскую услугу',\r\n            height: '90%',\r\n            width: '90%',\r\n            modal: true,\r\n            layout: 'fit',\r\n            buttons: [{\r\n                text: 'Закрыть',\r\n                handler: function (btn) {\r\n                    btn.up('window').close();\r\n                }\r\n            }],\r\n            items: [{\r\n                xtype: 'customServiceGrid',\r\n                rowActions: [{callbackName: 'chooseParentService', actionName: 'Выбрать'}],\r\n                hideButtons: true,\r\n                selModel: {mode: 'SINGLE'},\r\n                listeners: {\r\n                    itemdblclick: function (treePanel, record) {\r\n                        chooseParentService(record.get('id').lid, record.get('id').eid, record.get('title'));\r\n                    }\r\n                }\r\n            }]\r\n        }).show();\r\n    };\r\n\r\n    let showChildrenServicesGrid = function () {\r\n        Ext.create('Ext.window.Window', {\r\n            id: 'ChildrenServicesWindow',\r\n            title: 'Подуслуги',\r\n            height: '90%',\r\n            width: '90%',\r\n            modal: true,\r\n            layout: 'fit',\r\n            buttons: [{\r\n                text: 'Закрыть',\r\n                handler: function (btn) {\r\n                    btn.up('window').close();\r\n                }\r\n            }],\r\n            items: [{\r\n                xtype: 'customServiceGrid',\r\n                hideButtons: true,\r\n                hideActions: true,\r\n                selModel: {mode: 'SINGLE'},\r\n                storeSourceDirectFn: customServiceInfoService.getCustomSubServices,\r\n                getStoreExtraParams: function () {\r\n                    let me = this;\r\n                    let params = Ext.Object.fromQueryString(location.search);\r\n                    return {\r\n                        parentEid: params['eid'],\r\n                        parentLid: params['lid'],\r\n                        requesterType: me.requesterTypeFilter,\r\n                        departmentFilter: me.departmentFilter,\r\n                        searchString: me.searchString\r\n                    };\r\n                },\r\n                listeners: {\r\n                    itemdblclick: function (treePanel, record) {\r\n                        // ничего не делать\r\n                    }\r\n                }\r\n            }]\r\n        }).show();\r\n    };\r\n\r\n    Ext.direct.Manager.on('exception', function (event) {\r\n        Util.processExtDirectError(event);\r\n    });\r\n\r\n\r\n    let container = document.getElementById('placeholder');\r\n    let removeParentService = function () {\r\n        let parentServiceNameField = Ext.getCmp('parentServiceNameField');\r\n        parentServiceNameField.setValue(null);\r\n        parentServiceNameField.up('fieldcontainer').parentServiceEid = null;\r\n        parentServiceNameField.up('fieldcontainer').parentServiceLid = null;\r\n        Ext.tip.QuickTipManager.unregister('parentServiceNameField');\r\n    };\r\n    mainPanel = Ext.widget('panel', {\r\n        id: 'editorMainPanel',\r\n        margin: 0,\r\n        autoScroll: true,\r\n        scroller: 0,\r\n        minWidth: '100%',\r\n        listeners: {\r\n            boxready: function () {\r\n                let me = this;\r\n                let editFormPanel = Ext.getCmp('editFormPanel');\r\n\r\n                let resizeProperties = function () {\r\n                    let propWindow = Ext.getCmp('fieldProperties');\r\n                    let editFormPanel = Ext.getCmp('editFormPanel');\r\n                    let filler = editFormPanel.down('#filler');\r\n                    if (propWindow && filler) {\r\n                        propWindow.setPosition(5 + Ext.getBody().getWidth() * 0.685, editFormPanel.el.getY() + 5);\r\n                        propWindow.setSize(Ext.getBody().getWidth() * 0.295, editFormPanel.getSize().height - 5);\r\n                    }\r\n                };\r\n\r\n                Ext.EventManager.onWindowResize(function () {\r\n                    if (editFormPanel.body) {\r\n                        let bodyScroll = editFormPanel.body.getScroll().top;\r\n                        editFormPanel.scroller = bodyScroll !== 0 ? editFormPanel.body.getScroll().top : 0;\r\n                    }\r\n                    me.setHeight(Ext.getBody().getHeight() - 70);\r\n                    me.setWidth(Ext.getBody().getWidth());\r\n                    resizeProperties();\r\n\r\n                    if (editFormPanel.body) {\r\n                        editFormPanel.scroller !== 0 ? editFormPanel.body.scrollTo('top', editFormPanel.scroller) : null;\r\n                    }\r\n\r\n                    let printWindow = Ext.getCmp('printWindow');\r\n\r\n                    if (printWindow != null) {\r\n                        printWindow.setHeight(Ext.getBody().getHeight() * 0.9);\r\n                        printWindow.setWidth(Ext.getBody().getWidth() * 0.7);\r\n                        printWindow.center();\r\n                    }\r\n                });\r\n\r\n                me.setSize(Ext.getBody().getWidth(), Ext.getBody().getHeight() - 70);\r\n\r\n                if (formEid != null) {\r\n                    customServiceInfoService.getServiceInfoForFormEditor(formEid, formLid, function (response) {\r\n                        me.setValuesFromObject(response);\r\n                    });\r\n                } else {\r\n                    serviceTermController.getServiceTermKindList(function (response) {\r\n                        let cmp = Ext.getCmp('compositeServiceTermString');\r\n                        cmp.serviceTermKinds = response['serviceTermKindList'];\r\n                        cmp.serviceTerms = ServiceTermPanel.createDefaultServiceTerms(cmp.serviceTermKinds);\r\n                        cmp.updateText();\r\n                    });\r\n\r\n                    // если есть в куках\r\n                    let encoded = SimpleStorage.getAndRemove('basisServiceInfo', true);\r\n                    if (encoded) {\r\n                        let basisServiceInfo = Ext.decode(encoded);\r\n                        me.setValuesFromObject(basisServiceInfo);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        setValuesFromObject: function (response) {\r\n            let me = this;\r\n            let networkFolder = null;\r\n            if (configurationFullInfo.configuration.isRemoteSmbOn) {\r\n                networkFolder = Ext.getCmp('networkFolder');\r\n            }\r\n            let serviceTitle = Ext.getCmp('serviceTitle');\r\n            let form = Ext.getCmp('editFormPanel');\r\n            let editTools = Ext.getCmp('editTools');\r\n            let serviceInfoButton = Ext.getCmp('serviceInfoButton');\r\n            let person = Ext.getCmp('personCheckbox');\r\n            let sole = Ext.getCmp('soleCheckbox');\r\n            let legal = Ext.getCmp('legalCheckbox');\r\n            let printTemplateButton = Ext.getCmp(\"printTemplateButton\");\r\n            let conditionalPrintTemplateButton = Ext.getCmp(\"conditionalPrintTemplateButton\");\r\n            let departmentFieldContainer = Ext.getCmp('departmentFieldContainer');\r\n            let sendMethod = Ext.getCmp('sendMethod');\r\n            let allowDelay = Ext.getCmp('allowDelay');\r\n            let sendByCourier = Ext.getCmp('sendByCourier');\r\n            let formTemplate = Ext.getCmp('serviceFormTemplateButton');\r\n            let smartRouteDepartmentGuid = Ext.getCmp('smartRouteDepartmentGuid');\r\n            let servicePrintCodes = Ext.getCmp('servicePrintCodes');\r\n            let realEstateInfoFieldAdded = Ext.getCmp('realEstateInfoFieldAdded');\r\n            let pkPvdNumberFieldAdded = Ext.getCmp('pkPvdNumberFieldAdded');\r\n            let pkPvdNumberFieldRequired = Ext.getCmp('pkPvdNumberFieldRequired');\r\n            let useDocumentsGrid = Ext.getCmp('useDocumentsGrid');\r\n            let useRequesterBlock = Ext.getCmp('useRequesterBlock');\r\n            let code = Ext.getCmp('serviceCode');\r\n            let frguServiceId = Ext.getCmp('frguServiceId');\r\n            let level = Ext.getCmp('level');\r\n            let notRender = Ext.getCmp('notRender');\r\n            let complexEnable = Ext.getCmp('complexEnable');\r\n            let isPkpvd = Ext.getCmp('isPkpvd');\r\n            let notRelevant = Ext.getCmp('notRelevant');\r\n            let syncService = Ext.getCmp('syncService');\r\n            let syncMdm = Ext.getCmp('syncMdm');\r\n            let dontUseTemplateHeader = Ext.getCmp('dontUseTemplateHeader');\r\n            let paid = Ext.getCmp('paid');\r\n            let smartRouteCode = Ext.getCmp('smartRouteCode');\r\n            let sitServiceCode = Ext.getCmp('sitServiceCode');\r\n            let serviceFormXmlTemplate = Ext.ComponentQuery.query('[itemId = serviceFormXmlTemplate]')[0];\r\n            let onlineOnly = Ext.getCmp('onlineOnly');\r\n            let interdepartmentalRequestDocuments = Ext.getCmp('interdepartmentalRequestDocuments');\r\n            let isSubserviceCheckbox = Ext.getCmp('isSubserviceCheckbox');\r\n            let subservicesButton = Ext.getCmp('subservicesButton');\r\n            let sentToVisTemplate = Ext.getCmp('sentToVisTemplate');\r\n            let sentToVisRequestTemplate = Ext.getCmp('sentToVisRequestTemplate');\r\n            let fastSending = Ext.getCmp('fastSending');\r\n            let adapter = Ext.getCmp('adapter');\r\n            let createAdapterForm = Ext.getCmp('createAdapterForm');\r\n            let notificationService = Ext.getCmp('notificationService');\r\n            let useNotificationService = Ext.getCmp('useNotificationService');\r\n\r\n\r\n            let serviceTypeField = Ext.getCmp('serviceTypeField');\r\n            let handlerType = Ext.getCmp('handlerType');\r\n\r\n            let notEditableInProcess = Ext.getCmp('notEditableInProcess');\r\n            let sendToCallCenter = Ext.getCmp('sendToCallCenter');\r\n\r\n            if (networkFolder && response['networkFolder'] != null) {\r\n                networkFolder.setValue(response['networkFolder']);\r\n            }\r\n\r\n            if (response['code'] != null) {\r\n                code.setValue(response['code']);\r\n            }\r\n\r\n            if (response['frguServiceId'] != null) {\r\n                frguServiceId.setValue(response['frguServiceId']);\r\n            }\r\n\r\n            if (response['smartRouteCode'] != null) {\r\n                smartRouteCode.setValue(response['smartRouteCode']);\r\n            }\r\n\r\n            if (response['sitServiceCode'] != null) {\r\n                sitServiceCode.setValue(response['sitServiceCode']);\r\n            }\r\n\r\n            let compositeServiceTermString = Ext.getCmp('compositeServiceTermString');\r\n            compositeServiceTermString.serviceTerms = response['serviceTermList'];\r\n            compositeServiceTermString.serviceTermSameDay = response['serviceTermSameDay'];\r\n            compositeServiceTermString.plusOneDay = response['plusOneDay'];\r\n            compositeServiceTermString.serviceTermKinds = response['serviceTermKindList'];\r\n            compositeServiceTermString.updateText();\r\n\r\n            if (response['person'] === true) {\r\n                person.setValue(true)\r\n            }\r\n            if (response['sole'] === true) {\r\n                sole.setValue(true)\r\n            }\r\n            if (response['legal'] === true) {\r\n                legal.setValue(true)\r\n            }\r\n            if (response['fullTitle'] != null) {\r\n                serviceTitle.setValue(response['fullTitle']);\r\n            }\r\n            if (response['fullTitle'] != null) {\r\n                serviceTitle.setValue(response['fullTitle']);\r\n            }\r\n            printTemplateButton.printTemplateText = response['formPrintTemplate'];\r\n            CustomUtils.setFilePrintForm(response['formPrintTemplateFile'], response['formPrintTemplateFileExtension']);\r\n            conditionalPrintTemplateButton.conditionalPrintTemplates = response['conditionalPrintTemplates'];\r\n\r\n            if (response['text'] != null) {\r\n                serviceInfoButton.serviceInfoText = response['text']\r\n            }\r\n\r\n            if (response.formJsonString != null && CustomUtils.IsJsonString(response.formJsonString)) {\r\n                form.removeAll();\r\n                form.suspendLayouts();\r\n                let newFormValue = JSON.parse(response.formJsonString);\r\n                for (let i = 0; i < newFormValue.length; i++) {\r\n                    if (newFormValue[i].id !== 'defaultFormTitle') {\r\n                        editTools.constructField(newFormValue[i]);\r\n                    }\r\n                }\r\n                form.resumeLayouts();\r\n                if (Ext.getCmp(\"fieldProperties\") != null)\r\n                    Ext.getCmp(\"fieldProperties\").destroy();\r\n                form.doLayout();\r\n            }\r\n\r\n            if (response.sendMethod && response.sendMethod !== \"NONE\") {\r\n                sendMethod.setRawValue(response.sendMethod);\r\n                if (response.smartRouteDepartments) {\r\n                    if (response.smartRouteDepartments.length > 0) {\r\n                        smartRouteDepartmentGuid.setRawValue(response.smartRouteDepartments.length);\r\n                        smartRouteDepartmentGuid.smartRouteDepartments = response.smartRouteDepartments;\r\n                        smartRouteDepartmentGuid.show();\r\n                    }\r\n                }\r\n                if (response.sentToVisTemplate) {\r\n                    sentToVisTemplate.setValue(response.sentToVisTemplate);\r\n                }\r\n                if (response.sentToVisRequestTemplate) {\r\n                    sentToVisRequestTemplate.setValue(response.sentToVisRequestTemplate);\r\n                }\r\n                if (response.sendMethod === 'smart_route_integration') {\r\n                    sentToVisRequestTemplate.hide();\r\n                    sentToVisRequestTemplate.disable();\r\n                    allowDelay.hide();\r\n                    allowDelay.setValue(false);\r\n                    notEditableInProcess.hide();\r\n                    notEditableInProcess.setValue(false);\r\n                    adapter.setValue(response.adapter);\r\n                    sentToVisTemplate.show();\r\n                    sentToVisTemplate.enable();\r\n                    createAdapterForm.show();\r\n                } else {\r\n                    sentToVisTemplate.show();\r\n                    sentToVisTemplate.enable();\r\n                    sentToVisRequestTemplate.show();\r\n                    sentToVisRequestTemplate.enable();\r\n                    allowDelay.setValue(response.allowDelay);\r\n                    allowDelay.show();\r\n                    notEditableInProcess.setValue(response.notEditableInProcess);\r\n                    notEditableInProcess.show();\r\n                    createAdapterForm.hide();\r\n                }\r\n\r\n\r\n                useNotificationService.show();\r\n                sendToCallCenter.setValue(response.sendToCallCenter);\r\n                sendToCallCenter.show();\r\n                fastSending.setValue(response.fastSending);\r\n                fastSending.show();\r\n            }\r\n\r\n            notEditableInProcess.setValue(response.notEditableInProcess);\r\n            notEditableInProcess.show();\r\n\r\n            sendByCourier.setValue(response.sendByCourier);\r\n            formTemplate.templateEditText = response.formTemplate;\r\n\r\n            if (response.printCodes !== \"\" && response.printCodes != null) {\r\n                servicePrintCodes.setValue(response.printCodes);\r\n            }\r\n            if (response['realEstateInfoFieldAdded'] === true && realEstateInfoFieldAdded) {\r\n                realEstateInfoFieldAdded.suspendEvents();\r\n                realEstateInfoFieldAdded.setValue(true);\r\n                realEstateInfoFieldAdded.resumeEvents(false);\r\n            }\r\n            if (response['pkPvdNumberFieldAdded'] === true && pkPvdNumberFieldAdded) {\r\n                pkPvdNumberFieldAdded.suspendEvents();\r\n                pkPvdNumberFieldAdded.setValue(true);\r\n                pkPvdNumberFieldAdded.resumeEvents(false);\r\n                if (response['pkPvdNumberFieldRequired'] === true && pkPvdNumberFieldRequired) {\r\n                    pkPvdNumberFieldRequired.setValue(true);\r\n                }\r\n            }\r\n            if (response['useRequesterBlock'] === true && useRequesterBlock) {\r\n                useRequesterBlock.setValue(true);\r\n            }\r\n            if (response['shortTitle']) {\r\n                Ext.getCmp('shortTitleButton').value = response['shortTitle'];\r\n            }\r\n            if (response['useDocumentsGrid'] === true && useDocumentsGrid) {\r\n                useDocumentsGrid.setValue(true);\r\n            } else {\r\n                useDocumentsGrid.setValue(false);\r\n            }\r\n            if (response['level'] != null && level) {\r\n                level.setValue(response['level']);\r\n            }\r\n            if (response['notRender'] === true && notRender) {\r\n                notRender.setValue(true);\r\n            }\r\n            if (response['complexEnable'] === true && complexEnable) {\r\n                complexEnable.setValue(true);\r\n            }\r\n            if (response['isPkpvd'] === true && isPkpvd) {\r\n                isPkpvd.setValue(true);\r\n            }\r\n            if (response['notRelevant'] === true && notRelevant) {\r\n                notRelevant.setValue(true);\r\n            }\r\n            if (response['paid'] === true && paid) {\r\n                paid.setValue(true);\r\n            }\r\n            if (response['syncService'] === true && syncService) {\r\n                syncService.setValue(true);\r\n            }\r\n            if (response['syncMdm'] === true && syncMdm) {\r\n                syncMdm.setValue(true);\r\n            }\r\n            if (response['dontUseTemplateHeader'] === true && dontUseTemplateHeader) {\r\n                dontUseTemplateHeader.setValue(true);\r\n            }\r\n\r\n            me.el.dom.style.width = \"100%!important\";\r\n            departmentFieldContainer.setFromCustomServiceInfo(response);\r\n\r\n            if (response['formXmlTemplate'] != null) {\r\n                let formXmlTemplateValue = response['formXmlTemplate'];\r\n                serviceFormXmlTemplate.setValue(formXmlTemplateValue);\r\n            }\r\n\r\n            if (response['onlineOnly'] === false && onlineOnly) {\r\n                onlineOnly.setValue(true);\r\n            } else if (onlineOnly) {\r\n                onlineOnly.setValue(false);\r\n            }\r\n\r\n            if (response['interdepartmentalRequestDocuments'] && interdepartmentalRequestDocuments) {\r\n                interdepartmentalRequestDocuments.setValue(true);\r\n            } else if (interdepartmentalRequestDocuments) {\r\n                interdepartmentalRequestDocuments.setValue(false);\r\n            }\r\n\r\n            if (response['hasSubservices'] && subservicesButton) {\r\n                subservicesButton.show();\r\n                isSubserviceCheckbox.hide();\r\n            } else {\r\n                if (response['parentServiceEid'] && response['parentServiceLid'] && isSubserviceCheckbox) {\r\n                    isSubserviceCheckbox.suspendEvents(false);\r\n                    isSubserviceCheckbox.setValue(true);\r\n                    isSubserviceCheckbox.resumeEvents();\r\n                }\r\n            }\r\n\r\n            if (response['notificationService']) {\r\n                useNotificationService.setValue(true);\r\n                notificationService.setValue(response['notificationService']);\r\n            }\r\n            serviceTypeField.setServiceTypeFromCustomServiceInfo(response);\r\n            if (response['handlerType'] != null && handlerType) {\r\n                handlerType.setValue(response['handlerType']);\r\n            }\r\n\r\n            me.mfc = response['mfc'];\r\n            me.subDepartment = response['subDepartment'];\r\n            Ext.getCmp('editorMainPanel').rejectionReasonCodesHolder = response['rejectionReasonCodes'];\r\n\r\n        },\r\n\r\n        updateLayout: function (options) {\r\n            let me = this, defer, isRoot = options && options.isRoot;\r\n\r\n            if (!me.rendered || me.layoutSuspendCount || me.suspendLayout) {\r\n                return;\r\n            }\r\n\r\n            if (me.hidden) {\r\n                Ext.AbstractComponent.cancelLayout(me);\r\n            } else if (typeof isRoot !== 'boolean') {\r\n                isRoot = me.isLayoutRoot();\r\n            }\r\n\r\n            if (isRoot || !me.ownerLayout || !me.ownerLayout.onContentChange(me)) {\r\n                if (!me.isLayoutSuspended()) {\r\n                    defer = (options && options.hasOwnProperty('defer')) ? options.defer : me.deferLayouts;\r\n                    Ext.AbstractComponent.updateLayout(me, defer);\r\n                    me.scroller !== 0 ? me.body.scrollTo('top', me.scroller) : null;\r\n                }\r\n            }\r\n        },\r\n\r\n        frame: true,\r\n        header: false,\r\n        dockedItems: [\r\n            {\r\n                xtype: 'label',\r\n                dock: 'top',\r\n                margin: 0,\r\n                text: 'Редактор форм',\r\n                border: false,\r\n                style: {\r\n                    'text-align': 'center',\r\n                    'font-weight': 'bold',\r\n                    'font-size': '18'\r\n                }\r\n            },\r\n            {\r\n                dock: 'top',\r\n                border: false,\r\n                xtype: 'container',\r\n                layout: 'hbox',\r\n                items: [\r\n                    {\r\n                        xtype: 'textfield',\r\n                        value: location.toString().indexOf('newForm=true') !== -1 ? 'Новая услуга' : '',\r\n                        id: 'serviceTitle',\r\n                        msgTarget: 'under',\r\n                        name: 'serviceTitle',\r\n                        deleteDoubleSpaces: true,\r\n                        labelSeparator: '',\r\n                        flex: 1,\r\n                        margin: 3,\r\n                        maxLength: 1000,\r\n                        enforceMaxLength: true,\r\n                        listeners: {\r\n                            focus: function (field) {\r\n                                let btn = field.up('container').down('#changeBtn');\r\n                                btn.fieldFocused = true;\r\n                                btn.handler(btn);\r\n                            },\r\n                            blur: function (field) {\r\n                                let btn = field.up('container').down('#changeBtn');\r\n                                btn.fieldFocused = false;\r\n                                btn.handler(btn);\r\n                                field.inputEl.dom.style.border = \"none\";\r\n                            },\r\n                            boxready: function (field) {\r\n                                let btn = field.up('container').down('#changeBtn');\r\n                                new Ext.ToolTip({\r\n                                    target: field.inputEl,\r\n                                    html: 'Изменить название услуги',\r\n                                    listeners: {\r\n                                        show: function (toolTip) {\r\n                                            if (document.activeElement === field.inputEl.dom && btn.fieldFocused === true) {\r\n                                                toolTip.hide();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                                field.inputEl.addCls('fieldRemoveInput');\r\n                                field.inputEl.dom.style.fontWeight = 'bold';\r\n                                field.inputEl.dom.style.fontSize = '14';\r\n\r\n                                field.inputEl.on('mouseover', function () {\r\n                                    field.inputEl.dom.style.border = \"1px #99BCE8 solid\";\r\n                                });\r\n\r\n                                field.inputEl.on('mouseout', function () {\r\n                                    if (document.activeElement !== field.inputEl.dom) {\r\n                                        field.inputEl.dom.style.border = \"none\";\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        margin: 3,\r\n                        itemId: 'changeBtn',\r\n                        hidden: true,\r\n                        text: 'Изменить',\r\n                        handler: function (btn) {\r\n                            let serviceTitle = Ext.getCmp('serviceTitle');\r\n                            if (btn.fieldFocused === true) {\r\n                                serviceTitle.inputEl.removeCls('fieldRemoveInput');\r\n                            } else {\r\n                                serviceTitle.inputEl.addCls('fieldRemoveInput');\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                xtype: 'container',\r\n                layout: 'hbox',\r\n                margin: 3,\r\n                defaults: {\r\n                    margin: '0 2 0 2'\r\n                },\r\n                items: [\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Применить',\r\n                        tooltip: 'Сохранить промежуточные изменения и продолжить работу с формой.',\r\n                        handler: function () {\r\n                            let callback;\r\n                            if (ESFormEditorHelper.isEsFormEditor()) {\r\n                                callback = function (result, myMask) {\r\n                                    formEid = result.eid;\r\n                                    formLid = result.lid;\r\n                                    window.history.replaceState('', '',\r\n                                        ESFormEditorHelper.getEditorUrlByEidAndLid(formEid, formLid));\r\n                                    Ext.getCmp('ServiceReceptionPlaceFormButtonId').enable();\r\n                                    Ext.getCmp('MfcChooseComponentsCustomServiceFormButtonId').enable();\r\n                                    myMask.hide();\r\n                                };\r\n                                callback.needMask = true;\r\n                            } else {\r\n                                callback = 'onlySave';\r\n\r\n                                /* #region atc */\r\n                                if (Ext.Object.fromQueryString(location.search).eid !== null) {\r\n                                    let is_mine = 0;\r\n\r\n                                    let template = Ext.getCmp(\"printTemplateButton\").printTemplateText;\r\n\r\n                                    service = \"<ahk-json>\" + JSON.stringify(JSON.parse(\"[\" + Ext.getCmp(\"getFormJSON\").getJSON().toString() + \"]\"), null, 4) + \"</ahk-json>\";\r\n                                    service = service + \"<ahk-title>\" + Ext.getCmp('serviceTitle').value + \"</ahk-title>\";\r\n                                    service = service + \"<ahk-id>\" + Ext.Object.fromQueryString(location.search).eid + \"</ahk-id>\";\r\n\r\n                                    if (template === \"\") {\r\n                                        let conTemplate = Ext.getCmp(\"conditionalPrintTemplateButton\").conditionalPrintTemplates;\r\n                                        if (conTemplate.length > 0) {\r\n                                            let templates = \"\";\r\n                                            for (let i = 0; i < conTemplate.length; i++) {\r\n                                                templates = templates + \"<ahk-template_\" + i + \">\";\r\n                                                let name = \"<ahk-name>\" + conTemplate[i].fieldName + \"</ahk-name>\";\r\n                                                let value = \"<ahk-value>\" + conTemplate[i].fieldValue + \"</ahk-value>\";\r\n                                                templates = templates + name + value + \"<ahk-template>\" + conTemplate[i].htmlContent + \"</ahk-template>\";\r\n                                                templates = templates + \"</ahk-template_\" + i + \">\";\r\n                                                if (conTemplate[i].htmlContent.indexOf('applethecandy') != -1) { is_mine = 1 }\r\n                                            }\r\n\r\n                                            service = service + \"<ahk-count>\" + conTemplate.length + \"</ahk-count>\";\r\n                                            service = service + templates;\r\n                                            service = service + \"<ahk-is_mine>\" + is_mine + \"</ahk-is_mine>\";\r\n\r\n                                            download('service.txt', service);\r\n                                        }\r\n                                    } else {\r\n                                        if (template.indexOf('applethecandy') != -1) { is_mine = 1 }\r\n\r\n                                        service = service + \"<ahk-count>1</ahk-count>\";\r\n                                        service = service + \"<ahk-template>\" + template + \"</ahk-template>\";\r\n                                        service = service + \"<ahk-is_mine>\" + is_mine + \"</ahk-is_mine>\";\r\n\r\n                                        download('service.txt', service);\r\n                                    }\r\n                                }\r\n                                /* #endregion atc */\r\n                            }\r\n                            Ext.getCmp('saveFormButton').handler(callback);\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Сохранить',\r\n                        tooltip: 'Сохранить и перейти в список услуг',\r\n                        id: 'saveFormButton',\r\n                        handler: function (callback) {\r\n                            let checkSitFields = function (formJsonString) {\r\n                                let form = JSON.parse(formJsonString);\r\n                                let invalidFields = {lastName: 'Фамилия', firstName: 'Имя', birthDate: 'Дата рождения'};\r\n                                form.forEach(function (item) {\r\n                                    if (invalidFields[item.name]) {\r\n                                        delete invalidFields[item.name];\r\n                                    }\r\n                                });\r\n\r\n                                if (Object.keys(invalidFields).length > 0) {\r\n                                    let errorMessage = 'На форме отсутствуют обязательные поля для отправки:';\r\n                                    for (let key in invalidFields) {\r\n                                        errorMessage += '<br>' + invalidFields[key] + ' - ' + key;\r\n                                    }\r\n                                    Util.showError(errorMessage);\r\n                                    return false;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            };\r\n\r\n                            console.log(\"callback\", callback);\r\n                            let networkFolder = '';\r\n                            if (configurationFullInfo.configuration.isRemoteSmbOn) {\r\n                                networkFolder = Ext.getCmp('networkFolder').getValue();\r\n                            }\r\n                            let frguCodes = Ext.getCmp('frguCodesButton').codes,\r\n                                rejectionReasonCodes = Ext.getCmp('editorMainPanel').rejectionReasonCodesHolder,\r\n                                serviceTitle = Ext.getCmp('serviceTitle'),\r\n                                getFormJSON = Ext.getCmp('getFormJSON'),\r\n                                formJSONString = '[' + getFormJSON.getJSON() + ']',\r\n                                serviceInfoButton = Ext.getCmp('serviceInfoButton'), // serviceInfoText\r\n                                person = Ext.getCmp('personCheckbox'),\r\n                                sole = Ext.getCmp('soleCheckbox'),\r\n                                legal = Ext.getCmp('legalCheckbox'),\r\n                                requesterTypes = Ext.getCmp('requesterTypes'),\r\n                                printTemplateButton = Ext.getCmp(\"printTemplateButton\"),\r\n                                conditionalPrintTemplateButton = Ext.getCmp(\"conditionalPrintTemplateButton\"),\r\n                                departmentFieldContainer = Ext.getCmp(\"departmentFieldContainer\"),\r\n                                departmentId = departmentFieldContainer.departmentId,\r\n                                groupTitle = departmentFieldContainer.down(\"[name=groupTitle]\").getValue(),\r\n\r\n                                sendMethod = Ext.getCmp('sendMethod').getValue() === \"\" ? \"NONE\" : Ext.getCmp('sendMethod').getValue(),\r\n                                notificationService = Ext.getCmp('notificationService') ? Ext.getCmp('notificationService').getValue() : null,\r\n                                sendToCallCenter = Ext.getCmp('sendToCallCenter') ? Ext.getCmp('sendToCallCenter').getValue() : false,\r\n\r\n                            allowDelay = Ext.getCmp('allowDelay').getValue(),\r\n                            sendByCourier = Ext.getCmp('sendByCourier').getValue(),\r\n                            serviceFormTemplate = Ext.getCmp('serviceFormTemplateButton').templateEditText,\r\n                            smartRouteDepartmentGuid = Ext.getCmp('smartRouteDepartmentGuid'),\r\n                            printCodes = Ext.getCmp('servicePrintCodes').getValue(),\r\n                            realEstateInfoFieldAdded = Ext.getCmp('realEstateInfoFieldAdded').getValue(),\r\n                            pkPvdNumberFieldAdded = Ext.getCmp('pkPvdNumberFieldAdded').getValue(),\r\n                            pkPvdNumberFieldRequired = Ext.getCmp('pkPvdNumberFieldRequired').getValue(),\r\n                            code = Ext.getCmp('serviceCode').getValue(),\r\n                            frguServiceId = Ext.getCmp('frguServiceId').getValue(),\r\n                            useRequesterBlock = Ext.getCmp('useRequesterBlock').getValue(),\r\n                            useDocumentsGrid = Ext.getCmp('useDocumentsGrid').getValue(),\r\n                            level = Ext.getCmp('level').getValue(),\r\n                            notRender = Ext.getCmp('notRender').getValue(),\r\n                            complexEnable = Ext.getCmp('complexEnable').getValue(),\r\n                            isPkpvd = Ext.getCmp('isPkpvd').getValue(),\r\n                            notRelevant = Ext.getCmp('notRelevant').getValue(),\r\n                            syncService = Ext.getCmp('syncService').getValue(),\r\n                            syncMdm = Ext.getCmp('syncMdm').getValue(),\r\n                            dontUseTemplateHeader = Ext.getCmp('dontUseTemplateHeader').getValue(),\r\n                            paid = Ext.getCmp('paid').getValue(),\r\n                            mevCode = Ext.getCmp('smartRouteCode').getValue(),\r\n                            sitServiceCode = Ext.getCmp('sitServiceCode').getValue(),\r\n                            serviceFormXmlTemplate = Ext.ComponentQuery.query('[itemId = serviceFormXmlTemplate]')[0].getValue(),\r\n                            onlineOnly = Ext.getCmp('onlineOnly').getSubmitValue(),\r\n                            interdepartmentalRequestDocuments = Ext.getCmp('interdepartmentalRequestDocuments').getValue(),\r\n                            parentServiceEid = departmentFieldContainer.parentServiceEid,\r\n                            parentServiceLid = departmentFieldContainer.parentServiceLid,\r\n                            mevDepartmentGuids = [],\r\n                            sentToVisTemplate = Ext.getCmp('sentToVisTemplate').getValue(),\r\n                            sentToVisRequestTemplate = Ext.getCmp('sentToVisRequestTemplate').getValue(),\r\n                            fastSending = Ext.getCmp('fastSending').getValue(),\r\n                            adapter = Ext.getCmp('adapter').getValue(),\r\n                            notEditableInProcess = Ext.getCmp('notEditableInProcess').getValue(),\r\n                            serviceTypeField = Ext.getCmp('serviceTypeField'),\r\n                            serviceTypeId = serviceTypeField.valueToSend,\r\n                            handlerType = Ext.getCmp('handlerType').getValue();\r\n\r\n                            if (!formEid) {\r\n                                formEid = Ext.Object.fromQueryString(location.search).eid;\r\n                            }\r\n\r\n                            if (!formLid) {\r\n                                formLid = Ext.Object.fromQueryString(location.search).lid;\r\n                            }\r\n\r\n                            if (sendMethod === 'sit') {\r\n                                if (!sitServiceCode) {\r\n                                    Util.showError(\"Необходимо выбрать код услуги в СИТ\");\r\n                                    return;\r\n                                }\r\n                                if (!checkSitFields(formJSONString)) {\r\n                                    return;\r\n                                }\r\n                            } else if (sendMethod === 'smart_route_integration') {\r\n                                if (!adapter) {\r\n                                    Util.showError(\"Необходимо выбрать адаптер\");\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            if (!smartRouteDepartmentGuid.isHidden()) {\r\n                                if (typeof smartRouteDepartmentGuid.smartRouteDepartments === 'undefined' ||\r\n                                    smartRouteDepartmentGuid.smartRouteDepartments == null ||\r\n                                    smartRouteDepartmentGuid.smartRouteDepartments === \"\" ||\r\n                                    smartRouteDepartmentGuid.smartRouteDepartments.length === 0) {\r\n\r\n                                    Ext.Msg.alert('Ошибка', \"Необходимо выбрать ведомство для отправки в Digit МЭВ\");\r\n                                    return;\r\n                                } else {\r\n                                    smartRouteDepartmentGuid.smartRouteDepartments.forEach(function (department) {\r\n                                        mevDepartmentGuids.push(department.guid);\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            if (requesterTypes.isValid() && departmentId != null) {\r\n                                if (typeof callback != 'function' || (callback && callback.needMask)) {\r\n                                    var myMask = new Ext.LoadMask(Ext.getBody(), {\r\n                                        msg: 'Пожалуйста подождите...'\r\n                                    });\r\n                                    myMask.show();\r\n                                }\r\n                                let shortTitle = Ext.getCmp('shortTitleButton').value;\r\n                                let updateForm = function (formEid, formLid, serviceTitle, person, sole, legal,\r\n                                                           formJSONString, level, callback) {\r\n                                    let formDto = {\r\n                                        eid: formEid,\r\n                                        lid: formLid,\r\n                                        serviceTitle: serviceTitle,\r\n                                        person: person,\r\n                                        sole: sole,\r\n                                        legal: legal,\r\n                                        formJson: formJSONString,\r\n                                        level: level\r\n                                    };\r\n                                    let successFn = function (result) {\r\n                                        if (typeof callback === 'function') {\r\n                                            callback(result, myMask);\r\n                                        } else {\r\n                                            let newInterfaceUrl = configurationFullInfo.configuration.urlInterfaceThreeDotZero;\r\n                                            window.location = ESFormEditorHelper.getExpertSystemUrl(newInterfaceUrl);\r\n                                        }\r\n                                    };\r\n                                    let failureFn = function (response) {\r\n                                        myMask.hide();\r\n                                        if (response && response.status === 404) {\r\n                                            Ext.Msg.alert('Ошибка', \"Услуга не найдена.\");\r\n                                        } else {\r\n                                            Ext.Msg.alert('Ошибка', \"Возникла ошибка при сохранении услуги.\");\r\n                                        }\r\n                                        console.error(response);\r\n                                    };\r\n                                    ESFormEditorHelper.updateServiceForm(formDto, successFn, failureFn);\r\n                                };\r\n\r\n                                function saveForm(templateFileBase64) {\r\n                                    let compositeServiceTermString = Ext.getCmp('compositeServiceTermString');\r\n                                    if (notRender || notRelevant) {\r\n                                        serviceService.removeFromFavoritesByEidAndLid(formEid, formLid);\r\n                                    }\r\n                                    var dto = {\r\n                                        networkFolder:networkFolder,\r\n                                        eid: formEid,\r\n                                        lid: formLid,\r\n                                        title: serviceTitle.getValue(),\r\n                                        text: serviceInfoButton.serviceInfoText,\r\n                                        person: person.checked,\r\n                                        sole: sole.checked,\r\n                                        legal: legal.checked,\r\n                                        formJson: formJSONString,\r\n                                        formPrintTemplate: printTemplateButton.printTemplateText,\r\n                                        departmentId: departmentId,\r\n                                        groupTitle: groupTitle,\r\n                                        sendMethod: sendMethod,\r\n                                        allowDelay: allowDelay,\r\n                                        sendByCourier: sendByCourier,\r\n                                        formTemplate: serviceFormTemplate,\r\n                                        serviceTerms: compositeServiceTermString.serviceTerms,\r\n                                        serviceTermSameDay: compositeServiceTermString.serviceTermSameDay,\r\n                                        printCodes: printCodes.length == 0 ? JSON.stringify(printCodes) : printCodes.toString(),\r\n                                        realEstateInfoFieldAdded: realEstateInfoFieldAdded,\r\n                                        pkPvdNumberFieldAdded: pkPvdNumberFieldAdded,\r\n                                        pkPvdNumberFieldRequired: pkPvdNumberFieldRequired,\r\n                                        code: code,\r\n                                        mevDepartmentGuids: mevDepartmentGuids,\r\n                                        templateFileBase64: templateFileBase64,\r\n                                        templateFileExtension: printTemplateButton.printTemplateFileExtension,\r\n                                        useRequesterBlock: useRequesterBlock,\r\n                                        useDocumentsGrid: useDocumentsGrid,\r\n                                        plusOneDay: compositeServiceTermString.plusOneDay,\r\n                                        level: level,\r\n                                        frguServiceId: frguServiceId,\r\n                                        notRender: notRender,\r\n                                        notRelevant: notRelevant,\r\n                                        syncService: syncService,\r\n                                        syncMdm: syncMdm,\r\n                                        dontUseTemplateHeader: dontUseTemplateHeader,\r\n                                        shortTitle: shortTitle,\r\n                                        paid: paid,\r\n                                        mevCode: mevCode,\r\n                                        sitServiceCode: sitServiceCode,\r\n                                        conditionalPrintTemplateDtos: conditionalPrintTemplateButton.conditionalPrintTemplates,\r\n                                        formXmlTemplate: serviceFormXmlTemplate,\r\n                                        onlineOnly: onlineOnly,\r\n                                        interdepartmentalRequestDocuments: interdepartmentalRequestDocuments,\r\n                                        parentServiceEid: parentServiceEid,\r\n                                        parentServiceLid: parentServiceLid,\r\n                                        sentToVisTemplate: sentToVisTemplate,\r\n                                        sentToVisRequestTemplate: sentToVisRequestTemplate,\r\n                                        fastSending: fastSending,\r\n                                        notEditableInProcess: notEditableInProcess,\r\n                                        frguCodes: frguCodes,\r\n                                        rejectionReasonCodes: rejectionReasonCodes,\r\n                                        notifiavationService: notificationService,\r\n                                        sendToCallCenter: sendToCallCenter,\r\n                                        complexEnable: complexEnable,\r\n                                        adapter: adapter,\r\n                                        isPkpvd: isPkpvd,\r\n                                        serviceTypeId: serviceTypeId,\r\n                                        handlerType: handlerType\r\n                                    }\r\n                                    customServiceInfoService.saveDescription(\r\n                                        dto,\r\n                                        function (result, event) {\r\n                                            if (event.status) {\r\n                                                if (typeof callback == 'function') {\r\n                                                    callback(result, myMask);\r\n                                                } else if (\"onlySave\" == callback) {\r\n                                                    window.history.replaceState('', '', Util.formEditor.format(result.eid, result.lid));\r\n                                                    formEid = result.eid;\r\n                                                    formLid = result.lid;\r\n                                                    Ext.getCmp('ServiceReceptionPlaceFormButtonId').enable();\r\n                                                    Ext.getCmp('MfcChooseComponentsCustomServiceFormButtonId').enable();\r\n                                                    myMask.hide();\r\n                                                } else {\r\n                                                    if (ESFormEditorHelper.isEsFormEditor()) {\r\n                                                        let newInterfaceUrl = configurationFullInfo.configuration.urlInterfaceThreeDotZero;\r\n                                                        window.location = ESFormEditorHelper\r\n                                                            .getExpertSystemUrl(newInterfaceUrl);\r\n                                                    } else {\r\n                                                        window.location = 'customServices';\r\n                                                    }\r\n                                                }\r\n                                            } else {\r\n                                                myMask.hide();\r\n                                            }\r\n\r\n                                        }\r\n                                    );\r\n                                }\r\n\r\n                                if (ESFormEditorHelper.isEsFormEditor()) {\r\n                                    updateForm(formEid, formLid, serviceTitle.getValue(), person.checked, sole.checked,\r\n                                        legal.checked, formJSONString, level, callback);\r\n                                } else {\r\n                                    saveForm(printTemplateButton.printTemplateFile);\r\n                                }\r\n                            } else {\r\n                                if (!requesterTypes.isValid()) {\r\n                                    Ext.Msg.alert('Ошибка заполнения формы', 'Необходимо выбрать хотя бы один тип заявителя');\r\n                                } else if (departmentId == null) {\r\n                                    Ext.Msg.alert('Ошибка заполнения формы', 'Необходимо выбрать ведомство');\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Назад',\r\n                        handler: function () {\r\n                            let myMask = new Ext.LoadMask(Ext.getBody(), {\r\n                                msg: 'Пожалуйста подождите...'\r\n                            });\r\n                            myMask.show();\r\n                            if (ESFormEditorHelper.isEsFormEditor()) {\r\n                                let newInterfaceUrl = configurationFullInfo.configuration.urlInterfaceThreeDotZero;\r\n                                window.location = ESFormEditorHelper\r\n                                    .getExpertSystemUrl(newInterfaceUrl);\r\n                            } else if (document.referrer.indexOf('cpgu') !== -1) {\r\n                                window.location = document.referrer;\r\n                            } else {\r\n                                window.location = 'customServices';\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'container',\r\n                        flex: 1,\r\n                        layout: {\r\n                            type: 'hbox',\r\n                            pack: 'end'\r\n                        },\r\n                        defaults: {\r\n                            hidden: ESFormEditorHelper.isEsFormEditor()\r\n                        },\r\n                        items: [\r\n                            {\r\n                                xtype: 'button',\r\n                                margin: '0 5 0 0',\r\n                                style: 'border-radius:0!important',\r\n                                html: '<span style=\"color:darkblue\">Информация об услуге</span>',\r\n                                id: 'serviceInfoButton',\r\n                                handler: function (btn) {\r\n                                    if (Ext.getCmp('serviceInfoWindow') != null) {\r\n                                        Ext.getCmp('serviceInfoWindow').destroy();\r\n                                    }\r\n                                    Ext.widget('window', {\r\n                                        title: 'Информация об услуге',\r\n                                        id: 'serviceInfoWindow',\r\n                                        modal: true,\r\n                                        height: 400,\r\n                                        width: 350,\r\n                                        layout: 'fit',\r\n                                        dockedItems: [\r\n                                            {\r\n                                                xtype: 'toolbar',\r\n                                                layout: {\r\n                                                    type: 'hbox',\r\n                                                    pack: 'end'\r\n                                                },\r\n                                                dock: 'bottom',\r\n                                                border: false,\r\n                                                items: [\r\n                                                    {\r\n                                                        xtype: 'button',\r\n                                                        text: 'Изменить',\r\n                                                        handler: function (button) {\r\n                                                            btn.serviceInfoText = button.up('window').down('#editArea').getValue();\r\n                                                            button.up('window').destroy();\r\n                                                        }\r\n                                                    },\r\n                                                    {\r\n                                                        xtype: 'button',\r\n                                                        text: 'Закрыть',\r\n                                                        handler: function (button) {\r\n                                                            button.up('window').destroy();\r\n                                                        }\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        ],\r\n                                        items: [\r\n                                            {\r\n                                                xtype: 'textarea',\r\n                                                itemId: 'editArea',\r\n                                                grow: true,\r\n                                                value: btn.serviceInfoText\r\n                                            }\r\n                                        ]\r\n                                    }).show();\r\n                                }\r\n                            },\r\n                            CustomUtils.shortTitleButton,\r\n                            ESFormEditorHelper.isEsFormEditor() ? {\r\n                                xtype: 'hidden',\r\n                                id: 'printTemplateButton'\r\n                            } : CustomUtils.printTemplateButton,\r\n                            CustomUtils.downloadTemplateFileButton,\r\n                            CustomUtils.conditionalPrintTemplateButton,\r\n                            CustomUtils.templateEditButton,\r\n                            {\r\n                                xtype: 'button',\r\n                                margin: '0 2 0 2',\r\n                                text: 'JSON формы',\r\n                                id: 'getFormJSON',\r\n                                hidden: false,\r\n                                getFieldObjects: function (includeTextLabels, textFieldTypesArray, cloneableTypesArray, fileuploadpanelTypesArray) {\r\n                                    let getFormJSON = Ext.getCmp('getFormJSON');\r\n                                    let jsonStringValue = getFormJSON.getJSON();\r\n                                    let fieldNames = [];\r\n\r\n                                    //текстовые поля\r\n                                    let textFieldTypes = textFieldTypesArray;\r\n                                    if (textFieldTypesArray == null) {\r\n                                        textFieldTypes = ['textfield', 'textarea', 'textareafield', 'combobox', 'combo', 'datefield', 'KLADR', 'kladrfield'];\r\n                                    }\r\n\r\n                                    //чекбоксы\r\n                                    let boxFieldTypes = ['checkbox', 'checkboxfield'];\r\n\r\n                                    //клонпанель\r\n                                    let cloneableType = cloneableTypesArray;\r\n                                    if (cloneableTypesArray == null) {\r\n                                        cloneableType = ['cloneablePanel'];\r\n                                    }\r\n\r\n                                    //поле для загрузки файла\r\n                                    let fileuploadpanelType = fileuploadpanelTypesArray;\r\n                                    if (fileuploadpanelTypesArray == null) {\r\n                                        fileuploadpanelType = ['fileuploadpanel'];\r\n                                    }\r\n\r\n                                    let textLabelTypes = [];\r\n\r\n                                    if (includeTextLabels === true) {\r\n                                        textLabelTypes = ['fieldset', 'label'];//'label']; // TODO label\r\n                                    }\r\n\r\n                                    fieldNames.push({\r\n                                        'name': 'Обращается представитель заявителя',\r\n                                        'value': 'representative_check',\r\n                                        'xtype': 'checkbox'\r\n                                    });\r\n                                    jsonStringValue.forEach(function (item) {\r\n                                        let fieldObject = JSON.parse(item);\r\n                                        if (textFieldTypes.indexOf(fieldObject.xtype) !== -1) {\r\n                                            fieldNames.push({\r\n                                                'name': fieldObject.fieldLabel,\r\n                                                'value': fieldObject.name,\r\n                                                'xtype': fieldObject.xtype,\r\n                                                '': fieldObject.name\r\n                                            });\r\n                                        } else if (boxFieldTypes.indexOf(fieldObject.xtype) !== -1) {\r\n                                            fieldNames.push({\r\n                                                'name': fieldObject.boxLabel,\r\n                                                'value': fieldObject.name,\r\n                                                'xtype': fieldObject.xtype\r\n                                            });\r\n                                        } else if (fileuploadpanelType.indexOf(fieldObject.xtype) !== -1) {\r\n                                            fieldNames.push({\r\n                                                'name': fieldObject.text,\r\n                                                'value': fieldObject.fieldName,\r\n                                                'xtype': fieldObject.xtype\r\n                                            });\r\n                                        } else if (textLabelTypes.indexOf(fieldObject.xtype) !== -1) {\r\n                                            let fieldValue = fieldObject.title;\r\n\r\n                                            if (fieldObject.xtype === 'label') {\r\n                                                fieldValue = fieldObject.html;\r\n                                            }\r\n\r\n                                            let fieldTextObject = document.createElement('div');\r\n                                            fieldTextObject.innerHTML = fieldValue;\r\n                                            let fieldText = fieldTextObject.textContent;\r\n                                            let fieldObjectName = fieldObject.name;\r\n\r\n                                            if (fieldObjectName == null || fieldObjectName === '') {\r\n                                                fieldObjectName = fieldText;\r\n                                            }\r\n                                            if (!fieldText) {\r\n                                                fieldText = fieldObject.title;\r\n                                            }\r\n                                            if (fieldObjectName == null || fieldObjectName === '') {\r\n                                                fieldObjectName = fieldText;\r\n                                            }\r\n                                            fieldNames.push({\r\n                                                'name': fieldText,\r\n                                                'value': fieldObjectName,\r\n                                                'xtype': fieldObject.xtype\r\n                                            });\r\n                                        } else if (cloneableType.indexOf(fieldObject.xtype) !== -1) {\r\n                                            fieldNames.push({\r\n                                                'name': fieldObject.prefix,\r\n                                                'value': fieldObject.prefix,\r\n                                                'xtype': fieldObject.xtype\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                    return fieldNames;\r\n\r\n                                },\r\n                                reloadForm: function (button, newValue) {\r\n                                    reloadForm(button, newValue);\r\n                                },\r\n                                getJSON: function () {\r\n                                    let fields = Ext.ComponentQuery.query('[formField=true]', Ext.getCmp('editFormPanel'));\r\n                                    let newForm = [];\r\n                                    let serviceTitle = Ext.getCmp('serviceTitle');\r\n                                    if (serviceTitle) {\r\n                                        for (let i = 0; i < fields.length; i++) {\r\n                                            if (fields[i].up('cloneablePanel')) {\r\n                                                continue;\r\n                                            }\r\n                                            let notNeededConfigs = ['margin', 'padding', 'border', 'labelWidth', 'flex', 'height', 'width'];  //TODO disabled;\r\n\r\n                                            for (let j = 0; j < notNeededConfigs.length; j++) {\r\n                                                fields[i].initialConfig[notNeededConfigs[j]] = undefined;\r\n                                            }\r\n\r\n                                            if (fields[i].xtype === 'fileuploadpanel') {\r\n                                                fields[i].initialConfig.fieldName = fields[i].fieldName;\r\n                                            } else if (fields[i].xtype === 'checkbox') {\r\n                                                fields[i].initialConfig.name = fields[i].name;\r\n                                            } else if (fields[i].xtype === 'cloneablePanel') {\r\n                                                let newItems = [];\r\n\r\n                                                fields[i].items.each(function (item) {\r\n                                                    if (item.xtype === \"cloneablePanel\") {\r\n                                                        let nestedItems = [];\r\n                                                        for (let i = 0; i < item.items.length; i++) {\r\n                                                            let nestedItem = item.items.getAt(i);\r\n                                                            nestedItem.height = undefined;\r\n                                                            nestedItem.initialConfig.height = undefined;\r\n                                                            nestedItem.width = undefined;\r\n                                                            nestedItem.labelWidth = undefined;\r\n                                                            nestedItem.margin = undefined;\r\n                                                            nestedItem.border = undefined;\r\n                                                            nestedItem.initialConfig.width = undefined;\r\n\r\n                                                            if (nestedItem.name && nestedItem.name.indexOf('.') !== -1) {\r\n                                                                let nameParts = nestedItem.name.split('.');\r\n                                                                nestedItem.initialConfig.name = nameParts[nameParts.length - 1];\r\n                                                                nestedItem.name = nameParts[nameParts.length - 1];\r\n                                                            }\r\n\r\n                                                            nestedItem.initialConfig.id = undefined;\r\n                                                            nestedItems.push(nestedItem.initialConfig);\r\n\r\n                                                        }\r\n                                                        item.initialConfig.items = nestedItems;\r\n                                                    }\r\n\r\n                                                    item.height = undefined;\r\n                                                    item.initialConfig.height = undefined;\r\n                                                    item.width = undefined;\r\n                                                    item.labelWidth = undefined;\r\n                                                    item.margin = undefined;\r\n                                                    item.border = undefined;\r\n                                                    item.initialConfig.width = undefined;\r\n\r\n                                                    if (item.name && item.name.indexOf('.') !== -1) {\r\n                                                        let nameParts = item.name.split('.');\r\n                                                        item.initialConfig.name = nameParts[nameParts.length - 1];\r\n                                                        item.name = nameParts[nameParts.length - 1];\r\n                                                    }\r\n\r\n                                                    item.initialConfig.id = undefined;\r\n                                                    newItems.push(item.initialConfig);\r\n                                                });\r\n\r\n                                                fields[i].initialConfig.items = newItems;\r\n                                            } else {\r\n                                                fields[i].initialConfig.name = fields[i].name;\r\n                                            }\r\n                                            newForm.push(JSON.stringify(fields[i].initialConfig));\r\n                                        }\r\n                                    }\r\n                                    return newForm;\r\n                                },\r\n\r\n                                handler: function (btn) {\r\n                                    let newForm = btn.getJSON();\r\n                                    newForm = '[' + newForm.toString() + ']';\r\n\r\n                                    if (Ext.getCmp('formJSON') != null) {\r\n                                        Ext.getCmp('formJSON').destroy();\r\n                                    }\r\n\r\n                                    Ext.widget('window', {\r\n                                        title: 'JSON формы',\r\n                                        id: 'formJSON',\r\n                                        modal: true,\r\n                                        height: 400,\r\n                                        width: 350,\r\n                                        layout: 'fit',\r\n                                        dockedItems: [\r\n                                            {\r\n                                                xtype: 'toolbar',\r\n                                                layout: {\r\n                                                    type: 'hbox',\r\n                                                    pack: 'end'\r\n                                                },\r\n                                                dock: 'bottom',\r\n                                                border: false,\r\n                                                items: [\r\n                                                    {\r\n                                                        xtype: 'button',\r\n                                                        itemId: 'changeFormButton',\r\n                                                        text: 'Изменить форму',\r\n                                                        handler: function (button) {\r\n                                                            let editArea = Ext.getCmp('formJSON').down('#editArea');\r\n\r\n                                                            if (editArea && typeof editArea.getValue === 'function') {\r\n                                                                let newValue = editArea.getValue();\r\n                                                                if (newValue !== newForm) {\r\n                                                                    Ext.getCmp('getFormJSON').reloadForm(button, newValue);\r\n                                                                } else {\r\n                                                                    button.up('window').destroy();\r\n                                                                }\r\n                                                            } else {\r\n                                                                Ext.Msg.alert('Ошибка изменения формы', 'Не удалось найти editArea');\r\n                                                            }\r\n                                                        }\r\n                                                    },\r\n                                                    {\r\n                                                        xtype: 'button',\r\n                                                        text: 'Закрыть',\r\n                                                        handler: function (button) {\r\n                                                            button.up('window').destroy();\r\n                                                        }\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        ],\r\n                                        items: [\r\n                                            {\r\n                                                xtype: 'textarea',\r\n                                                itemId: 'editArea',\r\n                                                inputAttrTpl: 'spellcheck=false',\r\n                                                grow: true,\r\n                                                value: newForm\r\n                                            }\r\n                                        ]\r\n                                    }).show();\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n\r\n        layout: 'hbox',\r\n\r\n        items: [\r\n            {\r\n\r\n                id: 'editTools',\r\n                margin: 0,\r\n                dock: 'left',\r\n                itemId: 'tools',\r\n\r\n                getFieldName: function (xtype) {\r\n                    let fieldIndex = Ext.ComponentQuery.query('[formField=true][xtype=\"' + xtype + '\"]', Ext.getCmp('editFormPanel')).length;\r\n                    let fieldName = xtype + \"_\" + fieldIndex;\r\n                    let fieldCmp = Ext.ComponentQuery.query('[name=' + fieldName + ']');\r\n\r\n                    while (fieldCmp.length !== 0) {\r\n                        fieldIndex++;\r\n                        fieldCmp = Ext.ComponentQuery.query('[name=' + xtype + \"_\" + fieldIndex + ']');\r\n                    }\r\n\r\n                    return xtype + \"_\" + fieldIndex;\r\n                },\r\n\r\n                bodyStyle: 'border-radius:0;overflow:auto',\r\n                border: 2,\r\n\r\n                constructField: function (field, index) {\r\n                    if (Ext.getCmp(field.id)) {\r\n                        Ext.getCmp(field.id).ownerCt.destroy();\r\n                    }\r\n\r\n                    if (field.xtype === 'kladrfield') {\r\n                        field.style = 'height: 54px;'\r\n                    }\r\n\r\n                    if (field.xtype !== 'fieldset' && field.xtype !== 'label' && !field.name) {\r\n                        if (field.id) {\r\n                            field.name = field.id;\r\n                        } else {\r\n                            let fieldsIndexQuery = Ext.ComponentQuery.query('[formField=true][xtype=\"' + field.xtype + '\"]', Ext.getCmp('editFormPanel'));\r\n                            field.name = field.xtype + '_' + fieldsIndexQuery.length;\r\n\r\n                            if (Ext.ComponentQuery.query('[name=' + field.name + ']', Ext.getCmp('editFormPanel'))[0] != null) {\r\n                                field.name = field.name + '_new';\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let person = Ext.getCmp('personCheckbox');\r\n                    let sole = Ext.getCmp('soleCheckbox');\r\n                    let legal = Ext.getCmp('legalCheckbox');\r\n                    let editFormPanel = Ext.getCmp('editFormPanel');\r\n                    let bodyScroll = editFormPanel.body.getScroll().top;\r\n                    editFormPanel.scroller = bodyScroll !== 0 ? editFormPanel.body.getScroll().top : 0;\r\n                    /*\r\n                     * не верно работает field.draggable = { onDrag :function(event){ event.destroy(); return false; }, endDrag : function(event) { let editable = this.comp; let el = document.elementFromPoint(event.getXY()[0], event.getXY()[1]) console.log('enddrag'); if (el !== null) if (findIdOfParent(el) !== null) { let form = editable.ownerCt.up('form'); let oldIndex = form.items.indexOf(editable.ownerCt); let newIndex = form.items.indexOf(findIdOfParent(el)); if (oldIndex !== newIndex) form.move(oldIndex, newIndex) } event.destroy(); return false; } }\r\n                     */\r\n\r\n                    if (field.isPersonField === undefined) {\r\n                        field.isPersonField = person.checked\r\n                    }\r\n\r\n                    if (field.isSoleField === undefined) {\r\n                        field.isSoleField = sole.checked\r\n                    }\r\n\r\n                    if (field.isLegalField === undefined) {\r\n                        field.isLegalField = legal.checked\r\n                    }\r\n\r\n                    if (field.xtype === 'textarea') {\r\n                        field.height = '100%';\r\n                    } else if (field.xtype === 'fieldset') {\r\n                        field.border = false;\r\n                    } else if (field.xtype === 'fileuploadpanel' || field.xtype === \"KLADR\") {\r\n                        field.labelWidth = 200;\r\n                    }\r\n\r\n                    let fieldButtons = [\r\n                        {\r\n                            flex: 0,\r\n                            margin: '0 3 0 3',\r\n                            xtype: 'spinnerfield',\r\n                            width: 0,\r\n                            maxWidth: 0,\r\n                            inputType: 'button',\r\n                            labelWidth: 0,\r\n\r\n                            onSpinUp: function () {\r\n                                let spinner = this;\r\n                                let ownerPanel = Ext.getCmp('editFormPanel');\r\n                                let fieldParent = spinner.up('fieldcontainer');\r\n\r\n                                if (!fieldParent) {\r\n                                    fieldParent = Ext.getCmp('fieldProperties').editableField;\r\n                                    ownerPanel = Ext.getCmp(Ext.getCmp('fieldProperties').editableItemId);\r\n                                }\r\n\r\n                                if (fieldParent.items && fieldParent.items.length !== 0 && !fieldParent.items.first().isNowFocused) {\r\n                                    fieldParent.el.dom.click();\r\n                                }\r\n\r\n                                let index = ownerPanel.items.items.indexOf(fieldParent);\r\n\r\n                                if (index !== 0) {\r\n                                    let bodyScroll = ownerPanel.body.getScroll().top;\r\n                                    if (bodyScroll !== 0) {\r\n                                        ownerPanel.scroller = ownerPanel.body.getScroll().top;\r\n                                    } else {\r\n                                        editFormPanel.scroller = 0;\r\n                                    }\r\n                                    ownerPanel.move(index, index - 1);\r\n                                    ownerPanel.scroller !== 0 ? ownerPanel.body.scrollTo('top', ownerPanel.scroller) : null;\r\n                                }\r\n\r\n                                spinner.spinUpEl.removeCls(\"x-form-trigger-over\"); // Баг: Кнопка остается нажатой даже если выбрать другой элемент\r\n                                spinner.focus(100);\r\n                            },\r\n\r\n                            onSpinDown: function () {\r\n                                let spinner = this;\r\n                                let ownerPanel = Ext.getCmp('editFormPanel');\r\n                                let fieldParent = spinner.up('fieldcontainer');\r\n\r\n                                if (!fieldParent) {\r\n                                    fieldParent = Ext.getCmp('fieldProperties').editableField;\r\n                                    ownerPanel = Ext.getCmp(Ext.getCmp('fieldProperties').editableItemId);\r\n                                }\r\n\r\n                                if (fieldParent.items && fieldParent.items.length !== 0 && !fieldParent.items.first().isNowFocused) {\r\n                                    fieldParent.el.dom.click();\r\n                                }\r\n\r\n                                let index = ownerPanel.items.items.indexOf(fieldParent);\r\n\r\n                                if (index !== ownerPanel.items.length) {\r\n                                    let bodyScroll = ownerPanel.body.getScroll().top;\r\n                                    if (bodyScroll !== 0) {\r\n                                        ownerPanel.scroller = ownerPanel.body.getScroll().top;\r\n                                    } else {\r\n                                        editFormPanel.scroller = 0;\r\n                                    }\r\n                                    ownerPanel.move(index, index + 1);\r\n                                    ownerPanel.scroller !== 0 ? ownerPanel.body.scrollTo('top', ownerPanel.scroller) : null;\r\n                                }\r\n\r\n                                spinner.focus(100);\r\n                            }\r\n                        },\r\n                        {\r\n                            xtype: 'button',\r\n                            flex: 0,\r\n                            text: 'Удалить',\r\n                            margin: '0 3 0 18',\r\n                            handler: function (btn) {\r\n                                let editFormPanel = Ext.getCmp('editFormPanel');\r\n\r\n                                if (editFormPanel.body) {\r\n                                    let bodyScroll = editFormPanel.body.getScroll().top;\r\n                                    if (bodyScroll !== 0) {\r\n                                        editFormPanel.scroller = editFormPanel.body.getScroll().top;\r\n                                    } else {\r\n                                        editFormPanel.scroller = 0;\r\n                                    }\r\n                                }\r\n                                let propWindow = Ext.getCmp('fieldProperties'),\r\n                                    fieldParent = btn.up('fieldcontainer');\r\n\r\n                                if (!fieldParent) {\r\n                                    fieldParent = Ext.getCmp('fieldProperties').editableField;\r\n                                }\r\n                                let field = fieldParent.xtype === 'fieldcontainer' ? fieldParent.items.items[0] : fieldParent;\r\n\r\n                                checkAdditionalServiceTerm(field.name, function () {\r\n                                    if (propWindow && btn.ownerCt.id === propWindow.editableItemId) {\r\n                                        propWindow.destroy();\r\n                                    }\r\n\r\n                                    if (field && field.name) {\r\n                                        removeAdditionalServiceTerm(field.name);\r\n                                        CustomUtils.removeFieldFromCustomLogic(field.name);\r\n                                    }\r\n                                    fieldParent.destroy();\r\n                                    if (editFormPanel.body) {\r\n                                        editFormPanel.scroller !== 0 ? editFormPanel.body.scrollTo('top', editFormPanel.scroller) : null;\r\n                                    }\r\n                                });\r\n                            }\r\n                        },\r\n                        {\r\n                            xtype: 'button',\r\n                            flex: 0,\r\n                            text: 'Дублировать',\r\n                            margin: '0 2 0 2',\r\n                            handler: function (btn) {\r\n                                let fieldParent = btn.up('fieldcontainer');\r\n                                let field;\r\n\r\n                                if (!fieldParent) {\r\n                                    fieldParent = Ext.getCmp(Ext.getCmp('fieldProperties').editableItemId);\r\n                                    field = Ext.getCmp('fieldProperties').editableField;\r\n                                } else {\r\n                                    field = fieldParent.down('[formField=true]');\r\n                                }\r\n\r\n                                let fieldObj = {};\r\n                                let fieldsIndexQuery = Ext.ComponentQuery.query('[formField=true][xtype=\"' + field.xtype + '\"]', Ext.getCmp('editFormPanel'));\r\n                                let fieldName = field.xtype + '_c' + fieldsIndexQuery.length;\r\n                                for (let prop in field.initialConfig) {\r\n                                    if (field.initialConfig.hasOwnProperty(prop) && prop !== 'id') {\r\n                                        if (prop !== 'name' && prop !== 'fieldName') {\r\n                                            fieldObj[prop] = field.initialConfig[prop];\r\n                                        } else {\r\n                                            fieldObj[prop] = fieldName;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Ext.getCmp('editTools').constructField(fieldObj, fieldParent.ownerCt.items.indexOf(fieldParent) + 1)\r\n                            }\r\n                        },\r\n                        {\r\n                            xtype: 'field',\r\n                            style: 'visibility:hidden',\r\n                            itemId: 'filler',\r\n                            margin: 5,\r\n                            flex: 4\r\n                        }\r\n                    ];\r\n\r\n                    let fieldRenderFn = function (container, editableField) {\r\n                        let editFormPanel = Ext.getCmp('editFormPanel');\r\n                        editableField.formField = true;\r\n\r\n                        if (editableField.hidden === true) {\r\n                            editableField.show();\r\n                        }\r\n\r\n                        editableField.on('render', function (field) {\r\n                            editableField.disable();\r\n                            field.initialConfig.isPersonField = field.isPersonField;\r\n                            field.initialConfig.isSoleField = field.isSoleField;\r\n                            field.initialConfig.isLegalField = field.isLegalField;\r\n\r\n                            if (field.xtype === 'checkbox') {\r\n                                field.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>';\r\n                                field.labelAlign = 'right';\r\n                                field.labelSeparator = \"\";\r\n                                field.inputEl.dom.style.margin = Ext.isChrome ? \"0\" : \"1 -100 1 105\";\r\n                                field.boxLabelEl.dom.style.margin = Ext.isChrome ? \"0 3\" : \"1 -100 1 105\";\r\n                                field.boxLabelEl.dom.style.opacity = 1;\r\n                                field.labelCell.dom.style.display = 'block';\r\n                                field.labelEl.dom.style.visibility = 'hidden';\r\n                                field.bodyEl.dom.style.verticalAlign = 'middle';\r\n                                field.labelEl.dom.style.verticalAlign = 'middle';\r\n                                field.boxLabelEl.dom.style.verticalAlign = 'middle';\r\n                                field.inputEl.dom.style.verticalAlign = 'middle';\r\n                            }\r\n\r\n                            if (field.labelEl && field.allowBlank === false) {\r\n                                field.initialConfig.allowBlank = false;\r\n                                field.allowBlank = false;\r\n                                if (field.xtype !== 'checkbox') {\r\n                                    field.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.labelEl.dom.innerHTML;\r\n                                } else {\r\n                                    field.labelEl.dom.style.visibility = 'visible'\r\n                                }\r\n                            }\r\n\r\n                            if (field.inputEl) {\r\n                                field.inputEl.dom.removeAttribute('disabled');\r\n                                field.validateValue = function () {\r\n                                    return true;\r\n                                };\r\n\r\n                                if (field.labelEl) {\r\n                                    field.labelEl.dom.style.opacity = 1;\r\n                                }\r\n                                field.inputEl.dom.style.fontSize = 0;\r\n                            }\r\n\r\n                            function oncontainerClick(field) {\r\n                                if (!field) {\r\n                                    console.log('error, field dont exist');\r\n                                    return;\r\n                                }\r\n\r\n                                let focusedFields = document.querySelectorAll('[class*=fieldFocus]');\r\n                                let propertiesWindow = Ext.getCmp('fieldProperties');\r\n                                if (propertiesWindow != null) {\r\n                                    propertiesWindow.destroy();\r\n                                }\r\n\r\n                                let alreadySelected = false;\r\n                                for (let i = 0; i < focusedFields.length; i++) {\r\n                                    let focusedField = focusedFields[i];\r\n                                    if (focusedField === field.el.dom) {\r\n                                        alreadySelected = true;\r\n                                    }\r\n                                    Ext.get(focusedField).removeCls('fieldFocus');\r\n                                    if (Ext.isChrome)\r\n                                        focusedField.classList.remove('fieldFocus');\r\n                                }\r\n\r\n                                let allFields = Ext.ComponentQuery.query('fieldcontainer', Ext.getCmp('editFormPanel'));\r\n                                for (let j = 0; j < allFields.length; j++) {\r\n                                    let selectedField = allFields[j].items.first();\r\n                                    selectedField.isNowFocused = false;\r\n                                }\r\n\r\n                                if (alreadySelected && field.xtype === \"cloneablePanel\") {\r\n                                    return;\r\n                                }\r\n\r\n                                field.addCls('fieldFocus');\r\n                                field.isNowFocused = true;\r\n\r\n                                // Field Properties Window\r\n                                let newWindow = Ext.widget('window', {\r\n                                    id: 'fieldProperties',\r\n                                    title: 'Свойства',\r\n                                    bodyStyle: 'overflow:auto',\r\n                                    editableField: field,\r\n                                    editableItemId: field.ownerCt.id,\r\n                                    width: Ext.getBody().getWidth() * 0.295,\r\n                                    height: editFormPanel.getSize().height - 5,\r\n                                    layout: 'anchor',\r\n                                    defaults: {\r\n                                        anchor: '95%',\r\n                                        margin: 5\r\n                                    },\r\n                                    listeners: {\r\n                                        boxready: function (window) {\r\n                                            let propItems = [];\r\n                                            let labelValue = '';\r\n\r\n                                            if (field.xtype === 'label') {\r\n                                                labelValue = field.initialConfig.html;\r\n                                            } else if (field.xtype === 'checkbox') {\r\n                                                labelValue = field.initialConfig.boxLabel;\r\n                                            } else if (field.xtype === 'container' && field.down('button')) {\r\n                                                labelValue = field.down('button').text;\r\n                                            } else if (!field.getFieldLabel) {\r\n                                                if (field.xtype === 'fieldset') {\r\n                                                    labelValue = field.title;\r\n                                                } else if (field.xtype === 'fileuploadpanel') {\r\n                                                    labelValue = field.text;\r\n                                                }\r\n                                            } else {\r\n                                                labelValue = field.getFieldLabel();\r\n                                            }\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'textfield',\r\n                                                fieldLabel: 'Название',\r\n                                                itemId: 'label',\r\n                                                value: labelValue,\r\n                                                editableFieldType: field.xtype,\r\n                                                listeners: {\r\n                                                    change: function (item, newValue) {\r\n                                                        let bodyScroll = editFormPanel.body.getScroll().top;\r\n                                                        editFormPanel.scroller = bodyScroll !== 0 ? editFormPanel.body.getScroll().top : 0;\r\n\r\n                                                        if ('label' === field.xtype) {\r\n                                                            field.setText(newValue, false);\r\n                                                            field.initialConfig.html = newValue;\r\n                                                        } else if (field.setFieldLabel) {\r\n                                                            if ('checkbox' !== field.xtype) {\r\n                                                                field.initialConfig.fieldLabel = newValue;\r\n                                                                field.setFieldLabel(newValue);\r\n                                                            } else {\r\n                                                                field.initialConfig.boxLabel = newValue;\r\n                                                                field.boxLabelEl.dom.innerHTML = newValue;\r\n                                                                field.labelEl.dom.style.visibility = 'hidden';\r\n                                                                field.initialConfig.fieldLabel = undefined;\r\n                                                            }\r\n\r\n                                                            if (field.initialConfig.allowBlank === false) {\r\n                                                                if (field.xtype === 'checkbox') {\r\n                                                                    field.boxLabelEl.dom.innerHTML = newValue;\r\n                                                                    field.labelEl.dom.style.visibility = 'visible';\r\n                                                                    field.initialConfig.fieldLabel = undefined;\r\n                                                                } else if (field.xtype === 'KLADR') {\r\n                                                                    field.initialConfig.allowBlank = !newValue;\r\n                                                                    let kladrTextArea = field.down('textarea');\r\n                                                                    if (newValue) {\r\n                                                                        kladrTextArea.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.fieldLabel + ':'\r\n                                                                    } else {\r\n                                                                        kladrTextArea.setFieldLabel(field.fieldLabel)\r\n                                                                    }\r\n                                                                } else field.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.fieldLabel + ':';\r\n                                                            }\r\n                                                        } else if (field.setTitle && field.xtype === 'fieldset') {\r\n                                                            field.initialConfig.title = newValue;\r\n                                                            field.setTitle(newValue);\r\n                                                        } else if (field.xtype === 'fileuploadpanel') {\r\n                                                            field.initialConfig.text = newValue;\r\n                                                            field.text = newValue;\r\n                                                            field.down('filefield').setFieldLabel(newValue);\r\n                                                            if (field.initialConfig.allowBlank === false) {\r\n                                                                field.down('filefield').labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + newValue + ':';\r\n                                                            }\r\n                                                        } else if (field.xtype === 'container' && field.down('button') && field.down('button').setText) {\r\n                                                            field.down('button').text = newValue;\r\n                                                            field.down('button').initialConfig.text = newValue;\r\n                                                            field.down('button').setText(newValue);\r\n                                                        }\r\n\r\n                                                        editFormPanel.scroller !== 0 ? editFormPanel.body.scrollTo('top', editFormPanel.scroller) : null;\r\n                                                    }\r\n                                                }\r\n                                            });\r\n\r\n                                            if (field.setValue || field.xtype === 'fileuploadpanel') {\r\n                                                propItems.push({\r\n                                                    xtype: 'checkbox',\r\n                                                    boxLabel: 'Обязательно для заполнения',\r\n                                                    checked: (field.allowBlank === false || field.initialConfig.allowBlank === false),\r\n                                                    listeners: {\r\n                                                        change: function (item, newValue) {\r\n                                                            let editFormPanel = Ext.getCmp('editFormPanel');\r\n                                                            if (editFormPanel.body) {\r\n                                                                let bodyScroll = editFormPanel.body.getScroll().top;\r\n                                                                editFormPanel.scroller = bodyScroll !== 0 ? editFormPanel.body.getScroll().top : 0;\r\n                                                            }\r\n\r\n                                                            if (field.xtype === 'checkbox') {\r\n                                                                field.initialConfig.allowBlank = false;\r\n                                                                if (newValue === true) {\r\n                                                                    field.initialConfig.allowBlank = false;\r\n                                                                    field.boxLabelEl.dom.innerHTML = field.initialConfig.boxLabel;\r\n                                                                    field.labelEl.dom.style.visibility = 'visible';\r\n                                                                    field.initialConfig.fieldLabel = undefined;\r\n                                                                } else {\r\n                                                                    field.initialConfig.allowBlank = undefined;\r\n                                                                    field.boxLabelEl.dom.innerHTML = field.initialConfig.boxLabel;\r\n                                                                    field.labelEl.dom.style.visibility = 'hidden';\r\n                                                                    field.initialConfig.fieldLabel = undefined;\r\n                                                                }\r\n                                                            } else if (field.xtype === 'KLADR') {\r\n                                                                field.initialConfig.allowBlank = !newValue;\r\n                                                                let kladrTextArea = field.down('textarea');\r\n                                                                if (newValue) {\r\n                                                                    kladrTextArea.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.fieldLabel + ':'\r\n                                                                } else {\r\n                                                                    kladrTextArea.setFieldLabel(field.fieldLabel)\r\n                                                                }\r\n                                                            } else if (newValue === true) {\r\n                                                                field.initialConfig.allowBlank = false;\r\n                                                                field.xtype !== 'fileuploadpanel' ? field.labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.fieldLabel + ':' : field.down('filefield').labelEl.dom.innerHTML = '<span style=\"color:red\">*</span>' + field.text + ':';\r\n                                                            } else {\r\n                                                                field.initialConfig.allowBlank = undefined;\r\n                                                                field.xtype !== 'fileuploadpanel' ? field.setFieldLabel(field.getFieldLabel()) : field.down('filefield').setFieldLabel(field.text);\r\n                                                            }\r\n\r\n                                                            if (editFormPanel.body) {\r\n                                                                editFormPanel.scroller !== 0 ? editFormPanel.body.scrollTo('top', editFormPanel.scroller) : null;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                            if (field.getXType() !== 'combobox' && field.getXType() !== 'datefield' && field.maxLength) {\r\n                                                let maxLengthVal = 255;\r\n                                                if (field.getXType() === 'textareafield') {\r\n                                                    maxLengthVal = 500;\r\n                                                }\r\n\r\n                                                propItems.push({\r\n                                                    xtype: 'numberfield',\r\n                                                    fieldLabel: 'Максимальная длина',\r\n                                                    itemId: 'maxLength',\r\n                                                    minValue: 1,\r\n                                                    maxValue: maxLengthVal,\r\n                                                    msgTarget: 'under',\r\n                                                    value: field.maxLength !== Number.MAX_VALUE ? field.maxLength : '',\r\n                                                    hideTrigger: true,\r\n                                                    keyNavEnabled: false,\r\n                                                    mouseWheelEnabled: false,\r\n                                                    listeners: {\r\n                                                        change: function (item, newValue) {\r\n                                                            if (item.isValid()) {\r\n                                                                if (item.getValue() !== '' && item.getValue() !== 0 && item.getValue() != null) {\r\n                                                                    window.down('#minLength').maxValue = newValue;\r\n                                                                    field.initialConfig.maxLength = newValue;\r\n                                                                    field.maxLength = newValue\r\n                                                                } else {\r\n                                                                    window.down('#minLength').maxValue = undefined;\r\n                                                                    field.initialConfig.maxLength = undefined;\r\n                                                                    field.maxLength = Number.MAX_VALUE\r\n                                                                }\r\n\r\n                                                                window.down('#minLength').isValid()\r\n\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            } else if (field.getXType() === 'datefield') {\r\n                                                propItems.push({\r\n                                                    xtype: 'datefield',\r\n                                                    fieldLabel: 'Максимальное значение',\r\n                                                    itemId: 'maxValue',\r\n                                                    msgTarget: 'under',\r\n                                                    editable: false,\r\n                                                    trigger2Cls: 'x-form-clear-trigger',\r\n                                                    onTrigger2Click: function () {\r\n                                                        this.setValue(null);\r\n                                                        field.maxValue = undefined;\r\n                                                        field.initialConfig.maxValue = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        beforerender: function (item) {\r\n                                                            if (field.initialConfig.maxValue) {\r\n                                                                item.setValue(new Date(field.initialConfig.maxValue))\r\n                                                            }\r\n                                                        },\r\n                                                        change: function (item, newValue) {\r\n                                                            let thisDate = new Date();\r\n                                                            if (Ext.isDate(newValue) && newValue.ddMMyyyy() === thisDate.ddMMyyyy()) {\r\n                                                                field.initialConfig.maxValue = new Date().ddMMyyyy();\r\n                                                                field.setMaxValue(new Date());\r\n                                                            } else if (field.isValid() && Ext.isDate(newValue)) {\r\n                                                                field.initialConfig.maxValue = newValue.ddMMyyyy();\r\n                                                                field.setMaxValue(newValue);\r\n                                                            } else {\r\n                                                                field.initialConfig.maxValue = undefined;\r\n                                                                field.setMaxValue(null);\r\n                                                            }\r\n                                                        },\r\n                                                        afterrender: function (item) {\r\n                                                            let window = item.up('window');\r\n                                                            if (window.down('#fieldValidation') && window.down('#fieldValidation').getValue()) {\r\n                                                                item.setValue(null);\r\n                                                                item.setDisabled(true);\r\n                                                                field.setMaxValue(null);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                            if (field.getXType() !== 'combobox' && field.getXType() !== 'datefield' && (field.minLength || field.minLength === 0)) {\r\n                                                propItems.push({\r\n                                                    xtype: 'numberfield',\r\n                                                    value: field.minLength,\r\n                                                    fieldLabel: 'Минимальная длина',\r\n                                                    itemId: 'minLength',\r\n                                                    minValue: 0,\r\n                                                    msgTarget: 'under',\r\n                                                    hideTrigger: true,\r\n                                                    keyNavEnabled: false,\r\n                                                    mouseWheelEnabled: false,\r\n                                                    listeners: {\r\n                                                        change: function (item, newValue) {\r\n                                                            if (item.isValid()) {\r\n                                                                if (newValue !== 0 && newValue !== '' && item.getValue() != null) {\r\n                                                                    window.down('#maxLength').minValue = newValue;\r\n                                                                    field.initialConfig.minLength = newValue;\r\n                                                                    field.minLength = newValue\r\n                                                                } else {\r\n                                                                    window.down('#maxLength').minValue = 1;\r\n                                                                    field.initialConfig.minLength = undefined;\r\n                                                                    field.minLength = 0\r\n                                                                }\r\n                                                                window.down('#maxLength').isValid();\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                            let vTypeData = [];\r\n                                            if (field.getXType() === 'textfield' || field.xtype === 'textarea' || field.xtype === 'combobox') {\r\n                                                let vTypes = Ext.form.VTypes;\r\n\r\n                                                for (let prop in vTypes) {\r\n                                                    if (vTypes.hasOwnProperty(prop) && prop.indexOf('Title') !== -1) {\r\n                                                        let vType = {};\r\n                                                        vType['name'] = vTypes[prop];\r\n                                                        vType['value'] = prop.replace('Title', '');\r\n                                                        vTypeData.push(vType);\r\n                                                    }\r\n                                                }\r\n\r\n                                                vTypeData.push({\r\n                                                    'value': 'email',\r\n                                                    'name': 'Электронная почта'\r\n                                                });\r\n                                            } else if (field.xtype === 'datefield') {\r\n                                                let vTypes = Ext.form.VTypes;\r\n\r\n                                                for (let prop in vTypes) {\r\n                                                    if (vTypes.hasOwnProperty(prop) && prop.indexOf('DateFieldTitle') !== -1) {\r\n                                                        let vType = {};\r\n                                                        vType['name'] = vTypes[prop];\r\n                                                        vType['value'] = prop.replace('DateFieldTitle', '');\r\n                                                        vTypeData.push(vType);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            if (field.xtype !== 'label' && field.xtype !== 'fieldset' && field.xtype !== 'KLADR') {\r\n                                                propItems.push({\r\n                                                    xtype: 'textarea',\r\n                                                    fieldLabel: 'Подсказка к полю',\r\n                                                    value: (field.description != null && field.description !== '') ? field.description : '',\r\n                                                    itemId: 'fieldDescription',\r\n                                                    listeners: {\r\n                                                        change: function (thisField, value) {\r\n                                                            if (value !== '') {\r\n                                                                field.description = value;\r\n\r\n                                                                if (field.descriptionEl) {\r\n                                                                    field.descriptionEl.innerHTML = value;\r\n                                                                    field.ownerCt.updateLayout();\r\n                                                                } else if (field.xtype === 'fileuploadpanel') {\r\n                                                                    let description = ('<br><span style=\"font-style:italic;font-size:11px;color:gray;font-weight:normal;\">' + value + '</span>');\r\n                                                                    let filefield1 = field.down('filefield');\r\n                                                                    let fieldLabelValue1 = field.text + (field.text.endsWith(':') ? ' ' : ': ') + description;\r\n                                                                    filefield1.setFieldLabel(fieldLabelValue1, false)\r\n                                                                } else {\r\n                                                                    let element = document.createElement('span');\r\n                                                                    element.style.fontSize = \"smaller\";\r\n                                                                    element.style.color = \"#828282\";\r\n                                                                    element.innerHTML = value;\r\n                                                                    document.getElementById(field.id + '-bodyEl').appendChild(element);\r\n                                                                    field.descriptionEl = element;\r\n                                                                    field.ownerCt.updateLayout();\r\n                                                                }\r\n\r\n                                                                field.initialConfig.description = value;\r\n                                                            } else {\r\n                                                                field.description = undefined;\r\n                                                                field.initialConfig.description = undefined;\r\n\r\n                                                                if (field.descriptionEl) {\r\n                                                                    field.descriptionEl.innerHTML = '';\r\n                                                                } else if (field.xtype === 'fileuploadpanel') {\r\n                                                                    let filefield2 = field.down('filefield');\r\n                                                                    let fieldLabelValue2 = field.text + (field.text.endsWith(':') ? ' ' : ': ');\r\n                                                                    filefield2.setFieldLabel(fieldLabelValue2, false)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                            if (field.xtype === 'fileuploadpanel') {\r\n                                                if (!field.documentCharacterIdDef) {\r\n                                                    if (field.flag && field.flag === \"original\") {\r\n                                                        field.documentCharacterIdDef = 1;\r\n                                                        field.documentCharacterNameDef = \"Оригинал\";\r\n                                                    } else {\r\n                                                        field.documentCharacterIdDef = 2;\r\n                                                        field.documentCharacterNameDef = \"Копия\";\r\n                                                    }\r\n                                                }\r\n                                                propItems.push({\r\n                                                    xtype: 'triggerfield',\r\n                                                    fieldLabel: 'Тип документа по умолчанию',\r\n                                                    value: field.documentCharacterNameDef,\r\n                                                    triggerCls: 'x-form-clear-trigger',\r\n                                                    emptyText: '[Выбрать]',\r\n                                                    onTriggerClick: function () {\r\n                                                        this.setValue(null);\r\n\r\n                                                        field.documentCharacterIdDef = undefined;\r\n                                                        field.documentCharacterNameDef = undefined;\r\n                                                        field.initialConfig.documentCharacterIdDef = undefined;\r\n                                                        field.initialConfig.documentCharacterNameDef = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        focus: function (documentCharacterField) {\r\n                                                            Ext.create('ChoiceWindow', {\r\n                                                                id: 'documentCharacterСhoiceWindow',\r\n                                                                grid: {\r\n                                                                    xtype: 'DocumentCharactersGrid',\r\n                                                                    fromOrder: true,\r\n                                                                    storeConfig: {\r\n                                                                        pageSize: 1000\r\n                                                                    }\r\n                                                                },\r\n                                                                oncloselistener: function (window) {\r\n                                                                    let documentCharacterId = window['documentCharacterId'],\r\n                                                                        documentCharacterName = window['documentCharacterName'];\r\n\r\n                                                                    if (documentCharacterId && documentCharacterName) {\r\n                                                                        documentCharacterField.setValue(documentCharacterName);\r\n\r\n                                                                        field.documentCharacterIdDef = documentCharacterId;\r\n                                                                        field.documentCharacterNameDef = documentCharacterName;\r\n                                                                        field.initialConfig.documentCharacterIdDef = documentCharacterId;\r\n                                                                        field.initialConfig.documentCharacterNameDef = documentCharacterName;\r\n                                                                    }\r\n                                                                }\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n\r\n                                                let enableInterfaceThreeDotZero = configurationFullInfo\r\n                                                    .configuration\r\n                                                    .enableInterfaceThreeDotZero;\r\n\r\n                                                if (enableInterfaceThreeDotZero) {\r\n                                                    let documentTypeStore = new Ext.data.Store({\r\n                                                        autoLoad: true,\r\n                                                        fields: ['code', 'title'],\r\n                                                        proxy: new Ext.data.HttpProxy({\r\n                                                            method: 'GET',\r\n                                                            url: 'action/document/type/find/byGroup/'\r\n                                                        }),\r\n\r\n                                                        reader: new Ext.data.JsonReader({\r\n                                                            fields: ['code', 'title']\r\n                                                        }),\r\n                                                        remoteSort: false,\r\n                                                        sorters: [\r\n                                                            {\r\n                                                                property: 'title',\r\n                                                                direction: 'ASC'\r\n                                                            }\r\n                                                        ]\r\n                                                    });\r\n                                                    let scanDocumentTypeCombobox = new Ext.form.field.ComboBox({\r\n                                                        name: 'scanDocumentType',\r\n                                                        fieldLabel: 'Вид документа',\r\n                                                        valueField: 'code',\r\n                                                        displayField: 'title',\r\n                                                        queryMode: 'local',\r\n                                                        store: documentTypeStore,\r\n                                                        value: field.scanDocumentType,\r\n                                                        listeners: {\r\n                                                            change: function (comboboxField, newValue) {\r\n                                                                if (newValue && comboboxField.getStore().findRecord('code', newValue)) {\r\n                                                                    field.scanDocumentType = newValue;\r\n                                                                    field.initialConfig.scanDocumentType = newValue;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    });\r\n                                                    let changeUrlAndReloadDocumentTypeStore = function (group) {\r\n                                                        if (group) {\r\n                                                            documentTypeStore\r\n                                                                .getProxy()\r\n                                                                .url = 'action/document/type/find/byGroup/' + group;\r\n                                                            documentTypeStore.load(function (records) {\r\n                                                                if (!field.scanDocumentType\r\n                                                                    || !documentTypeStore.findRecord('code', field.scanDocumentType)) {\r\n                                                                    scanDocumentTypeCombobox.select(records[0]);\r\n                                                                }\r\n                                                            });\r\n                                                            scanDocumentTypeCombobox.enable();\r\n                                                        } else {\r\n                                                            documentTypeStore.removeAll();\r\n                                                            field.scanDocumentType = undefined;\r\n                                                            field.initialConfig.scanDocumentType = undefined;\r\n                                                            scanDocumentTypeCombobox.disable();\r\n                                                        }\r\n                                                    };\r\n                                                    changeUrlAndReloadDocumentTypeStore(field.scanDocumentTypeGroup);\r\n                                                    let documentTypeGroupStore = new Ext.data.Store({\r\n                                                        autoLoad: true,\r\n                                                        fields: ['code', 'title'],\r\n                                                        proxy: new Ext.data.HttpProxy({\r\n                                                            method: 'GET',\r\n                                                            url: 'action/document/type/group/findAll'\r\n                                                        }),\r\n\r\n                                                        reader: new Ext.data.JsonReader({\r\n                                                            fields: ['code', 'title']\r\n                                                        }),\r\n                                                        remoteSort: false,\r\n                                                        sorters: [\r\n                                                            {\r\n                                                                property: 'title',\r\n                                                                direction: 'ASC'\r\n                                                            }\r\n                                                        ]\r\n                                                    });\r\n                                                    propItems.push(\r\n                                                        {\r\n                                                            xtype: 'combobox',\r\n                                                            name: 'scanDocumentTypeGroup',\r\n                                                            fieldLabel: 'Группа видов документа',\r\n                                                            valueField: 'code',\r\n                                                            displayField: 'title',\r\n                                                            queryMode: 'local',\r\n                                                            store: documentTypeGroupStore,\r\n                                                            value: field.scanDocumentTypeGroup,\r\n                                                            trigger2Cls: 'x-form-clear-trigger',\r\n                                                            onTrigger2Click: function () {\r\n                                                                let combobox = this;\r\n                                                                combobox.setValue(null);\r\n                                                                field.scanDocumentTypeGroup = undefined;\r\n                                                                field.initialConfig.scanDocumentTypeGroup = undefined;\r\n                                                                changeUrlAndReloadDocumentTypeStore(null);\r\n                                                            },\r\n                                                            listeners: {\r\n                                                                blur: function (comboboxField) {\r\n                                                                    let value = comboboxField.getValue();\r\n                                                                    if (value && !comboboxField.getStore().findRecord('code', value)) {\r\n                                                                        value = undefined;\r\n                                                                    }\r\n                                                                    changeUrlAndReloadDocumentTypeStore(value);\r\n                                                                    field.scanDocumentTypeGroup = value;\r\n                                                                    field.initialConfig.scanDocumentTypeGroup = value;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    );\r\n                                                    propItems.push(\r\n                                                        scanDocumentTypeCombobox\r\n                                                    );\r\n                                                    propItems.push(\r\n                                                        {\r\n                                                            xtype: 'combobox',\r\n                                                            name: 'scanDocumentWithdraw',\r\n                                                            fieldLabel: 'Признак изымаемости документа',\r\n                                                            editable: false,\r\n                                                            allowBlank: false,\r\n                                                            queryMode: 'local',\r\n                                                            emptyText: '[Выбрать]',\r\n                                                            msgTarget: 'under',\r\n                                                            value: field.scanDocumentWithdraw ? field.scanDocumentWithdraw : '',\r\n                                                            store: Ext.create('Ext.data.Store', {\r\n                                                                fields: ['name', 'value'],\r\n                                                                data: [\r\n                                                                    {name: 'По умолчанию', value: ''},\r\n                                                                    {name: 'Изымаемый', value: 'true'},\r\n                                                                    {name: 'Неизымаемый', value: 'false'}\r\n                                                                ]\r\n                                                            }),\r\n                                                            displayField: 'name',\r\n                                                            valueField: 'value',\r\n                                                            listeners: {\r\n                                                                afterrender: function (comboboxField) {\r\n                                                                    field.scanDocumentWithdraw = comboboxField.getValue();\r\n                                                                    field.initialConfig.scanDocumentWithdraw = comboboxField.getValue();\r\n                                                                },\r\n                                                                change: function (comboboxField, newValue) {\r\n                                                                    field.scanDocumentWithdraw = newValue;\r\n                                                                    field.initialConfig.scanDocumentWithdraw = newValue;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n\r\n                                                propItems.push({\r\n                                                    xtype: 'triggerfield',\r\n                                                    hidden: enableInterfaceThreeDotZero ? enableInterfaceThreeDotZero : false,\r\n                                                    fieldLabel: 'Группа видов документа по умолчанию',\r\n                                                    value: field.documentKindGroupNameDef,\r\n                                                    triggerCls: 'x-form-clear-trigger',\r\n                                                    emptyText: '[Выбрать]',\r\n                                                    onTriggerClick: function () {\r\n                                                        this.setValue(null);\r\n\r\n                                                        field.documentKindGroupIdDef = undefined;\r\n                                                        field.documentKindGroupNameDef = undefined;\r\n                                                        field.initialConfig.documentKindGroupIdDef = undefined;\r\n                                                        field.initialConfig.documentKindGroupNameDef = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        focus: function (documentKindGroupField) {\r\n                                                            Ext.create('ChoiceWindow', {\r\n                                                                id: 'documentKindGroupСhoiceWindow',\r\n                                                                grid: {\r\n                                                                    xtype: 'DocumentKindGroupsGrid',\r\n                                                                    isForChoice: true,\r\n                                                                    asProperty: true,\r\n                                                                    storeConfig: {\r\n                                                                        pageSize: 1000\r\n                                                                    }\r\n                                                                },\r\n                                                                oncloselistener: function (window) {\r\n                                                                    let documentKindGroupId = window['documentKindGroupId'],\r\n                                                                        documentKindGroupName = window['documentKindGroupName'];\r\n\r\n                                                                    if (documentKindGroupId && documentKindGroupName) {\r\n                                                                        documentKindGroupField.setValue(documentKindGroupName);\r\n\r\n                                                                        field.documentKindGroupIdDef = documentKindGroupId;\r\n                                                                        field.documentKindGroupNameDef = documentKindGroupName;\r\n                                                                        field.initialConfig.documentKindGroupIdDef = documentKindGroupId;\r\n                                                                        field.initialConfig.documentKindGroupNameDef = documentKindGroupName;\r\n                                                                    }\r\n                                                                }\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                                let isInterdepartmentalRequestDocument = Ext.getCmp('interdepartmentalRequestDocuments').getValue();\r\n                                                if (isInterdepartmentalRequestDocument) {\r\n                                                    let buttonChangeListener = function (thisField) {\r\n                                                        let adaptersDocumentButton = thisField.next('[name=adaptersDocumentButton]');\r\n                                                        if (adaptersDocumentButton) {\r\n                                                            if (thisField.getValue()) {\r\n                                                                adaptersDocumentButton.enable();\r\n                                                                if (field.adapterId) adaptersDocumentButton.setTooltip(field.adapterId);\r\n                                                            } else {\r\n                                                                adaptersDocumentButton.disable();\r\n                                                                adaptersDocumentButton.setTooltip('');\r\n                                                                field.adapterId = null;\r\n                                                                field.initialConfig.adapterId = null;\r\n                                                            }\r\n                                                        }\r\n                                                    };\r\n                                                    propItems.push({\r\n                                                        xtype: 'checkbox',\r\n                                                        name: 'interdepartmentalRequestDocument',\r\n                                                        boxLabel: 'Документ может быть запрошен по каналам СМЭВ',\r\n                                                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                        checked: !!field.interdepartmental,\r\n                                                        listeners: {\r\n                                                            afterrender: function (thisField) {\r\n                                                                buttonChangeListener(thisField);\r\n                                                            },\r\n                                                            change: function (thisField, newValue) {\r\n                                                                field.interdepartmental = newValue;\r\n                                                                field.initialConfig.interdepartmental = newValue;\r\n                                                                let adaptersDocumentButton = thisField.next('[name=adaptersDocumentButton]');\r\n                                                                buttonChangeListener(thisField);\r\n                                                            }\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n\r\n                                                propItems.push({\r\n                                                    xtype: \"button\",\r\n                                                    name: 'adaptersDocumentButton',\r\n                                                    text: 'Межведомственный запрос',\r\n                                                    hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                    disabled: true,\r\n                                                    handler: function (button) {\r\n                                                        let windowParams = Ext.Object.fromQueryString(location.search);\r\n                                                        let callbackFunction = function (adapter) {\r\n                                                            if (adapter) {\r\n                                                                field.adapterId = adapter.id;\r\n                                                                field.initialConfig.adapterId = adapter.id;\r\n                                                                button.setTooltip(adapter.id);\r\n                                                            }\r\n                                                        };\r\n                                                        if (windowParams.eid) {\r\n                                                            AdapterUtils.getServiceDocumentsToAdapterRefs(field.adapterId, callbackFunction);\r\n                                                        } else {\r\n                                                            let saveFormButton = Ext.getCmp('saveFormButton');\r\n\r\n                                                            saveFormButton.handler(function (callback) {\r\n                                                                console.log(callback);\r\n                                                                window.history.replaceState('', '', Util.formEditor.format(callback.eid, callback.lid));\r\n                                                                Ext.getCmp('ServiceReceptionPlaceFormButtonId').enable();\r\n                                                                Ext.getCmp('MfcChooseComponentsCustomServiceFormButtonId').enable();\r\n                                                                AdapterUtils.getServiceDocumentsToAdapterRefs(field.adapterId, callbackFunction);\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                            if (field.getXType() === 'textfield' || field.xtype === 'textarea' || field.xtype === 'combobox' || field.xtype === \"datefield\") {\r\n                                                let comboData = [];\r\n\r\n                                                OrderStrategies.strategies.forEach(function (strategyObject) {\r\n                                                    if (typeof (strategyObject.getStrategy) === 'function') {\r\n                                                        if (!strategyObject.strategy.match(/F?e?[Mm]ale/)) { /* atc */\r\n                                                            comboData.push({\r\n                                                                'name': strategyObject.description,\r\n                                                                'value': strategyObject.strategy\r\n                                                            })\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n\r\n                                                propItems.push({\r\n                                                    xtype: 'combobox',\r\n                                                    fieldLabel: 'Стратегия (автозаполнение из ЛК)',\r\n                                                    value: field.strategy != null ? field.strategy : '',\r\n                                                    hidden: field.specialConfig != null,\r\n                                                    itemId: 'fieldStrategy',\r\n                                                    msgTarget: 'under',\r\n                                                    queryMode: \"local\",\r\n                                                    displayField: \"name\",\r\n                                                    valueField: \"value\",\r\n                                                    forceSelection: true,\r\n                                                    store: {\"fields\": [\"name\", \"value\"], \"data\": comboData},\r\n                                                    trigger2Cls: 'x-form-clear-trigger',\r\n                                                    onTrigger2Click: function () {\r\n                                                        let combobox = this;\r\n                                                        combobox.setValue(null);\r\n                                                        field.strategy = undefined;\r\n                                                        field.initialConfig.strategy = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        beforequery: function (record) {\r\n                                                            record.query = record.query.split('\\\\').join('');\r\n                                                            record.query = new RegExp(record.query, 'i');\r\n                                                            record.forceAll = true;\r\n                                                        },\r\n                                                        change: function (combobox, newValue) {\r\n                                                            if (newValue != null) {\r\n                                                                field.strategy = newValue;\r\n                                                                field.initialConfig.strategy = newValue;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                                propItems.push({\r\n                                                    xtype: 'combobox',\r\n                                                    fieldLabel: 'Валидация поля',\r\n                                                    itemId: 'fieldValidation',\r\n                                                    msgTarget: 'under',\r\n                                                    queryMode: \"local\",\r\n                                                    displayField: \"name\",\r\n                                                    valueField: \"value\",\r\n                                                    //editable: false,\r\n                                                    forceSelection: true,\r\n                                                    value: field.vtype != null ? field.vtype : '',\r\n                                                    store: {\r\n                                                        \"fields\": [\"name\", \"value\"], \"data\": vTypeData,\r\n                                                        listeners: {}\r\n                                                    },\r\n                                                    trigger2Cls: 'x-form-clear-trigger',\r\n                                                    onTrigger2Click: function () {\r\n                                                        let combobox = this;\r\n                                                        combobox.setValue(null);\r\n                                                        field.vtype = undefined;\r\n                                                        field.initialConfig.vtype = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        beforequery: function (record) {\r\n                                                            record.query = record.query.split('\\\\').join('');\r\n                                                            record.query = new RegExp(record.query, 'i');\r\n                                                            record.forceAll = true;\r\n                                                        },\r\n                                                        change: function (combobox, newValue) {\r\n                                                            let window = combobox.up('window');\r\n                                                            if (newValue != null) {\r\n                                                                field.vtype = newValue;\r\n                                                                field.initialConfig.vtype = newValue;\r\n                                                                if (window && window.down('#maxValue')) {\r\n                                                                    let maxValue = window.down('#maxValue');\r\n                                                                    maxValue.setValue(null);\r\n                                                                    maxValue.setDisabled(true);\r\n                                                                    field.initialConfig.maxValue = undefined;\r\n                                                                }\r\n                                                            } else {\r\n                                                                if (window && window.down('#maxValue')) window.down('#maxValue').setDisabled(false);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                            }\r\n\r\n                                            /* #region atc */\r\n                                            if (field.xtype === \"KLADR\") {\r\n                                                let comboData = [];\r\n\r\n                                                OrderStrategies.strategies.forEach(function (strategyObject) {\r\n                                                    if (typeof (strategyObject.getStrategy) === 'function') {\r\n                                                        if (strategyObject.description.includes(\"JSON\")) {\r\n                                                            if (!strategyObject.strategy.match(/F?e?[Mm]ale/)) {\r\n                                                                comboData.push({\r\n                                                                    'name': strategyObject.description,\r\n                                                                    'value': strategyObject.strategy\r\n                                                                })\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n\r\n                                                propItems.push({\r\n                                                    xtype: 'combobox',\r\n                                                    fieldLabel: 'Стратегия (автозаполнение из ЛК)',\r\n                                                    value: field.strategy != null ? field.strategy : '',\r\n                                                    hidden: field.specialConfig != null,\r\n                                                    itemId: 'fieldStrategy',\r\n                                                    msgTarget: 'under',\r\n                                                    queryMode: \"local\",\r\n                                                    displayField: \"name\",\r\n                                                    valueField: \"value\",\r\n                                                    forceSelection: true,\r\n                                                    store: { \"fields\": [\"name\", \"value\"], \"data\": comboData },\r\n                                                    trigger2Cls: 'x-form-clear-trigger',\r\n                                                    onTrigger2Click: function () {\r\n                                                        let combobox = this;\r\n                                                        combobox.setValue(null);\r\n                                                        field.strategy = undefined;\r\n                                                        field.initialConfig.strategy = undefined;\r\n                                                    },\r\n                                                    listeners: {\r\n                                                        beforequery: function (record) {\r\n                                                            record.query = record.query.split('\\\\').join('');\r\n                                                            record.query = new RegExp(record.query, 'i');\r\n                                                            record.forceAll = true;\r\n                                                        },\r\n                                                        change: function (combobox, newValue) {\r\n                                                            if (newValue != null) {\r\n                                                                field.strategy = newValue;\r\n                                                                field.initialConfig.strategy = newValue;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                            /* #endregion atc */\r\n\r\n                                            if (field.xtype === 'combobox') {\r\n                                                propItems.push({\r\n                                                    xtype: 'checkbox',\r\n                                                    itemId: 'editable',\r\n                                                    fieldLabel: 'Список значений:',\r\n                                                    boxLabel: 'Редактирование значения после выбора',\r\n                                                    checked: field.initialConfig.editable !== false,\r\n                                                    listeners: {\r\n                                                        change: function (checkbox) {\r\n                                                            let isChecked = checkbox.checked === true;\r\n                                                            field.editable = isChecked;\r\n                                                            field.initialConfig.editable = isChecked;\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n\r\n                                                let specialConfigData = [];\r\n\r\n                                                for (let config in PredefinedFields.specialConfig) {\r\n                                                    if (PredefinedFields.specialConfig[config].specialConfigCode != null) {\r\n                                                        specialConfigData.push({\r\n                                                            'name': PredefinedFields.specialConfig[config].specialConfigName,\r\n                                                            'value': PredefinedFields.specialConfig[config].specialConfigCode\r\n                                                        })\r\n                                                    }\r\n                                                }\r\n                                                // костыль для уже существующих услуг для комбо из набора полей\r\n                                                if (field.displayField !== 'identityDocumentName' && field.displayField !== 'authority') {\r\n                                                    propItems.push({\r\n                                                        xtype: 'combobox',\r\n                                                        itemId: 'specialConfig',\r\n                                                        fieldLabel: 'Специальный список',\r\n                                                        queryMode: 'local',\r\n                                                        editable: false,\r\n                                                        displayField: 'name',\r\n                                                        valueField: 'value',\r\n                                                        store: {\r\n                                                            fields: ['name', 'value'],\r\n                                                            data: specialConfigData\r\n                                                        },\r\n                                                        value: field.specialConfig != null ? field.specialConfig : '',\r\n                                                        trigger1Cls: 'x-form-arrow-trigger',\r\n                                                        trigger2Cls: 'x-form-clear-trigger',\r\n                                                        onTrigger2Click: function () {\r\n                                                            let combobox = this;\r\n                                                            combobox.setValue(null);\r\n                                                            field.specialConfig = null;\r\n                                                            field.initialConfig.specialConfig = null;\r\n                                                        },\r\n                                                        listeners: {\r\n                                                            change: function (combobox, newValue) {\r\n                                                                let grid = Ext.getCmp('comboGrid'),\r\n                                                                    fieldStrategy = Ext.ComponentQuery.query('[itemId=fieldStrategy]')[0];\r\n                                                                if (newValue != null) {\r\n                                                                    fieldStrategy.setValue(null);\r\n                                                                    fieldStrategy.hide();\r\n                                                                    grid.hide();\r\n                                                                    field.specialConfig = newValue;\r\n                                                                    field.initialConfig.specialConfig = newValue;\r\n\r\n                                                                    field.initialConfig.store = null;\r\n                                                                    field.store.store = null;\r\n                                                                    field.queryMode = null;\r\n                                                                    field.displayField = null;\r\n                                                                    field.valueField = null;\r\n                                                                    field.initialConfig.queryMode = null;\r\n                                                                    field.initialConfig.displayField = null;\r\n                                                                    field.initialConfig.valueField = null;\r\n                                                                } else {\r\n                                                                    fieldStrategy.show();\r\n                                                                    grid.show();\r\n                                                                    field.specialConfig = null;\r\n                                                                    field.initialConfig.specialConfig = null;\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                                let fieldStore = [];\r\n\r\n                                                if (field.initialConfig && field.initialConfig.store && field.initialConfig.store.data) {\r\n                                                    fieldStore = field.initialConfig.store.data;\r\n                                                }\r\n\r\n                                                let gridStore = Ext.create('Ext.data.Store', {\r\n                                                    fields: ['value'],\r\n                                                    data: {\r\n                                                        'items': fieldStore\r\n                                                    },\r\n                                                    proxy: {\r\n                                                        type: 'memory',\r\n                                                        reader: {\r\n                                                            type: 'json',\r\n                                                            root: 'items'\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n\r\n                                                let cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\r\n                                                    clicksToEdit: 1\r\n\r\n                                                });\r\n\r\n                                                propItems.push(\r\n                                                    Ext.create('Ext.grid.Panel', {\r\n                                                        minHeight: 100,\r\n                                                        id: 'comboGrid',\r\n                                                        hidden: field.specialConfig != null ? true : false,\r\n                                                        tbar: [\r\n                                                            {\r\n                                                                text: 'Добавить',\r\n                                                                xtype: 'button',\r\n                                                                handler: function () {\r\n                                                                    gridStore.add({value: ''});\r\n                                                                }\r\n                                                            },\r\n                                                            {\r\n                                                                text: 'Удалить',\r\n                                                                xtype: 'button',\r\n                                                                handler: function (btn) {\r\n                                                                    let grid = btn.up('grid');\r\n                                                                    let model = grid.getSelectionModel();\r\n                                                                    let selected = model.selected.first();\r\n                                                                    checkAdditionalServiceTerm(selected.data.value, function () {\r\n                                                                        if (selected != null) {\r\n                                                                            removeAdditionalServiceTerm(selected.data.value);\r\n                                                                            grid.store.remove(selected);\r\n                                                                        } else if (grid.store.getTotalCount() !== 0) {\r\n                                                                            let record = grid.store.last();\r\n                                                                            grid.store.remove(record);\r\n                                                                        }\r\n\r\n                                                                        let data = [];\r\n                                                                        let storeData = grid.store.data.items;\r\n\r\n                                                                        for (let i = 0; i < storeData.length; i++) {\r\n                                                                            let cellValue = storeData[i].data['value'];\r\n                                                                            if (cellValue !== '') {\r\n                                                                                data.push({'value': cellValue});\r\n                                                                            }\r\n                                                                        }\r\n\r\n                                                                        field.initialConfig.store = {\r\n                                                                            fields: ['value'],\r\n                                                                            data: data\r\n                                                                        };\r\n\r\n                                                                        field.store.store = {\r\n                                                                            fields: ['value'],\r\n                                                                            data: data\r\n                                                                        };\r\n\r\n                                                                        field.queryMode = 'local';\r\n                                                                        field.displayField = 'value';\r\n                                                                        field.valueField = 'value';\r\n                                                                        field.initialConfig.queryMode = 'local';\r\n                                                                        field.initialConfig.displayField = 'value';\r\n                                                                        field.initialConfig.valueField = 'value';\r\n                                                                        grid.store.sync();\r\n\r\n                                                                    });\r\n                                                                }\r\n                                                            },\r\n                                                            {\r\n                                                                xtype: 'container',\r\n                                                                flex: 1,\r\n                                                                layout: {\r\n                                                                    type: 'hbox',\r\n                                                                    pack: 'end'\r\n                                                                },\r\n                                                                items: [{\r\n                                                                    xtype: 'button',\r\n                                                                    text: 'Обновить',\r\n                                                                    handler: function (btn) {\r\n                                                                        let data = [];\r\n                                                                        let grid = btn.up('grid');\r\n                                                                        let storeData = grid.store.data.items;\r\n                                                                        for (let i = 0; i < storeData.length; i++) {\r\n                                                                            let cellValue = storeData[i].data['value'];\r\n                                                                            if (cellValue !== '') {\r\n                                                                                data.push({'value': cellValue});\r\n                                                                            }\r\n                                                                        }\r\n                                                                        grid.store.removeAll();\r\n                                                                        grid.store.loadData(data);\r\n                                                                    }\r\n                                                                }]\r\n                                                            }\r\n                                                        ],\r\n                                                        store: gridStore,\r\n                                                        columns: [\r\n                                                            new Ext.grid.RowNumberer({text: '№'}),\r\n                                                            {\r\n                                                                text: 'Значение',\r\n                                                                dataIndex: 'value',\r\n                                                                flex: 3,\r\n                                                                field: {\r\n                                                                    xtype: 'textfield',\r\n                                                                    allowRestrictedSymbols: true,\r\n                                                                    fieldStyle: {\r\n                                                                        'border-radius': '0!important'\r\n                                                                    },\r\n                                                                    listeners: {\r\n                                                                        change: function (textfield, newValue) {\r\n                                                                            let data = [];\r\n                                                                            let grid = textfield.up('grid');\r\n                                                                            let storeData = grid.store.data.items;\r\n                                                                            let cell = grid.selModel.getLastSelected();\r\n\r\n                                                                            for (let i = 0; i < storeData.length; i++) {\r\n                                                                                let cellValue = storeData[i].data['value'];\r\n                                                                                if (storeData[i] === cell) {\r\n                                                                                    if (newValue !== '') {\r\n                                                                                        data.push({'value': newValue});\r\n                                                                                    }\r\n                                                                                } else if (cellValue !== '') {\r\n                                                                                    data.push({'value': cellValue});\r\n                                                                                }\r\n                                                                            }\r\n\r\n                                                                            field.queryMode = 'local';\r\n                                                                            field.displayField = 'value';\r\n                                                                            field.valueField = 'value';\r\n                                                                            field.initialConfig.queryMode = 'local';\r\n                                                                            field.initialConfig.displayField = 'value';\r\n                                                                            field.initialConfig.valueField = 'value';\r\n\r\n                                                                            field.initialConfig.store = {\r\n                                                                                fields: ['value'],\r\n                                                                                data: data\r\n                                                                            };\r\n\r\n                                                                            field.store = {\r\n                                                                                fields: ['value'],\r\n                                                                                data: data\r\n                                                                            }\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        ],\r\n                                                        selModel: {\r\n                                                            selType: 'cellmodel'\r\n                                                        },\r\n                                                        plugins: [cellEditing],\r\n                                                        viewConfig: {\r\n                                                            preserveScrollOnRefresh: true,\r\n                                                            copy: true,\r\n                                                            plugins: {\r\n                                                                ptype: 'gridviewdragdrop',\r\n                                                                dragText: 'Drag and drop to reorganize'\r\n                                                            },\r\n                                                            listeners: {\r\n                                                                beforedrop: function (node, data, overModel, dropPosition, dropHandlers) {\r\n                                                                    let record = data.records[0],\r\n                                                                        grid = Ext.getCmp('comboGrid'),\r\n                                                                        storeData = grid.store.data.items,\r\n                                                                        newStoreData = [];\r\n                                                                    grid.store.remove(record);\r\n                                                                    dropHandlers.processDrop();\r\n                                                                    for (let i = 0; i < storeData.length; i++) {\r\n                                                                        let cellValue = storeData[i].data['value'];\r\n                                                                        if (cellValue !== '') {\r\n                                                                            newStoreData.push({'value': cellValue});\r\n                                                                        }\r\n                                                                    }\r\n                                                                    grid.store.removeAll();\r\n                                                                    grid.store.loadData(newStoreData);\r\n\r\n                                                                    field.initialConfig.store = {\r\n                                                                        fields: ['value'],\r\n                                                                        data: newStoreData\r\n                                                                    };\r\n\r\n                                                                    field.store.store = {\r\n                                                                        fields: ['value'],\r\n                                                                        data: newStoreData\r\n                                                                    };\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    })\r\n                                                );\r\n                                            }\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'checkboxgroup',\r\n                                                labelAlign: 'top',\r\n                                                columns: 1,\r\n                                                fieldLabel: 'Доступные типы заявителей',\r\n                                                items: [\r\n                                                    {\r\n                                                        itemId: 'PersonCheck',\r\n                                                        boxLabel: 'Физическое лицо',\r\n                                                        checked: field.isPersonField,\r\n                                                        listeners: {\r\n                                                            change: function (checkbox, newValue) {\r\n                                                                field.isPersonField = newValue;\r\n                                                                field.initialConfig.isPersonField = newValue\r\n                                                            }\r\n                                                        }\r\n                                                    },\r\n                                                    {\r\n                                                        itemId: 'SoleCheck',\r\n                                                        boxLabel: 'Индивидуальный предприниматель',\r\n                                                        checked: field.isSoleField,\r\n                                                        listeners: {\r\n                                                            change: function (checkbox, newValue) {\r\n                                                                field.isSoleField = newValue;\r\n                                                                field.initialConfig.isSoleField = newValue\r\n                                                            }\r\n                                                        }\r\n                                                    },\r\n                                                    {\r\n                                                        itemId: 'LegalCheck',\r\n                                                        boxLabel: 'Юридическое лицо',\r\n                                                        checked: field.isLegalField,\r\n                                                        listeners: {\r\n                                                            change: function (checkbox, newValue) {\r\n                                                                field.isLegalField = newValue;\r\n                                                                field.initialConfig.isLegalField = newValue\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                ]\r\n                                            });\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'checkbox',\r\n                                                fieldLabel: 'Скрытое поле',\r\n                                                listeners: {\r\n                                                    boxready: function (checkbox) {\r\n                                                        if (field.initialConfig.hidden) {\r\n                                                            checkbox.setValue(true);\r\n                                                        }\r\n                                                    },\r\n                                                    change: function (checkbox) {\r\n                                                        if (checkbox.checked) {\r\n                                                            field.initialConfig.hidden = true;\r\n                                                            field.initialConfig.disabled = true;\r\n                                                        } else {\r\n                                                            field.initialConfig.hidden = undefined;\r\n                                                            field.initialConfig.disabled = undefined;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            });\r\n\r\n                                            if (!field.up('cloneablePanel') && (field.getXType() === 'checkboxfield' || field.getXType() === 'combobox' || field.getXType().indexOf('text') !== -1)) { // пока не готово\r\n                                                let text = field.customLogic == null ? '[0]' : field.customLogic.indexOf('customLogic') !== -1 ? '[' + JSON.parse(field.customLogic).customLogic.length + ']' : '[' + field.customLogic.length + ']';\r\n                                                let scriptCounter = field.scripts == null ? '[0]' : '[' + field.scripts.length + ']';\r\n                                                propItems.push({\r\n                                                    xtype: 'container',\r\n                                                    layout: 'hbox',\r\n                                                    items: [\r\n                                                        {\r\n                                                            xtype: 'button',\r\n                                                            text: 'Логика (события)',\r\n                                                            logicValue: field.customLogic,\r\n                                                            handler: function (btn) {\r\n                                                                CustomUtils.createLogicWindow(btn, field);\r\n                                                            }\r\n                                                        },\r\n                                                        {\r\n                                                            xtype: 'label',\r\n                                                            itemId: 'logicCounter',\r\n                                                            margin: '3px 3px 0px 3px',\r\n                                                            text: text\r\n                                                        }\r\n                                                    ]\r\n                                                });\r\n                                                propItems.push({\r\n                                                    xtype: 'container',\r\n                                                    layout: 'hbox',\r\n                                                    hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                    items: [\r\n                                                        {\r\n                                                            xtype: 'button',\r\n                                                            text: 'Обработчик',\r\n                                                            logicValue: field.script,\r\n                                                            handler: function (btn) {\r\n                                                                CustomUtils.createScriptWindow(btn, field);\r\n                                                            }\r\n                                                        },\r\n                                                        {\r\n                                                            xtype: 'label',\r\n                                                            itemId: 'scriptCounter',\r\n                                                            margin: '3px 3px 0px 3px',\r\n                                                            text: scriptCounter\r\n                                                        }\r\n                                                    ]\r\n                                                });\r\n                                            }\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'textfield',\r\n                                                fieldLabel: 'Переменная',\r\n                                                hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                disabled: false, /* atc */\r\n                                                itemId: 'fieldNameProperty',\r\n                                                listeners: {\r\n                                                    added: function (item) {\r\n                                                        let fieldVariableName = field.name;\r\n\r\n                                                        if (field.xtype === 'fileuploadpanel') {\r\n                                                            fieldVariableName = field.fieldName;\r\n                                                        } else if (field.xtype === 'cloneablePanel') {\r\n                                                            fieldVariableName = field.prefix;\r\n                                                        }\r\n\r\n                                                        item.setValue(fieldVariableName)\r\n\r\n                                                    },\r\n                                                    change: function (item, newValue) {\r\n                                                        if (field.xtype === 'fileuploadpanel') {\r\n                                                            field.fieldName = newValue;\r\n                                                            field.initialConfig.fieldName = newValue;\r\n                                                        } else if (field.xtype === 'cloneablePanel') {\r\n                                                            field.prefix = newValue;\r\n                                                            field.initialConfig.prefix = newValue;\r\n                                                        } else {\r\n                                                            CustomUtils.changeFieldNameFromCustomLogic(newValue, field.name);\r\n                                                            field.name = newValue;\r\n                                                            field.initialConfig.name = newValue;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            });\r\n\r\n                                            let fieldType;\r\n                                            if (field.getXType() === 'textfield' || field.xtype === 'textarea' || field.xtype === 'combobox' || field.getXType() === 'checkboxfield') {\r\n                                                fieldType = 'STRING';\r\n                                            } else if (field.xtype === \"datefield\") {\r\n                                                fieldType = 'DATE';\r\n                                            } else if (field.xtype === 'fileuploadpanel') {\r\n                                                fieldType = 'FILE';\r\n                                            } else {\r\n                                                fieldType = 'STRING';\r\n                                            }\r\n\r\n                                            let requesterFormStore = new Ext.data.JsonStore({\r\n                                                \"fields\": ['name', \"title\"],\r\n                                                idProperty: 'name',\r\n                                                autoLoad: true,\r\n                                                proxy: {\r\n                                                    type: 'CPGUAjax',\r\n                                                    url: 'action/getRequesterFormFields',\r\n                                                    extraParams: {\r\n                                                        fieldType: fieldType\r\n                                                    },\r\n                                                    reader: {\r\n                                                            type: 'json',\r\n                                                            root: 'records',\r\n                                                            totalProperty: 'total'\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'combo',\r\n                                                fieldLabel: 'Поле формы заявителя',\r\n                                                id: 'requesterFormField',\r\n                                                hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                msgTarget: 'under',\r\n                                                queryMode: \"local\",\r\n                                                displayField: \"title\",\r\n                                                valueField: \"name\",\r\n                                                editable: false,\r\n                                                value: field.requesterFormFieldId != null ? field.requesterFormFieldId : '',\r\n                                                store: requesterFormStore,\r\n                                                trigger2Cls: 'x-form-clear-trigger',\r\n                                                onTrigger2Click: function () {\r\n                                                    let combobox = this;\r\n                                                    combobox.setValue(null);\r\n                                                    field.requesterFormFieldId = undefined;\r\n                                                    field.initialConfig.requesterFormFieldId = undefined;\r\n                                                },\r\n                                                listeners: {\r\n                                                    beforequery: function (record) {\r\n                                                        record.query = record.query.split('\\\\').join('');\r\n                                                        record.query = new RegExp(record.query, 'i');\r\n                                                        record.forceAll = true;\r\n                                                    },\r\n                                                    change: function (combobox, newValue) {\r\n                                                        if (newValue != null) {\r\n                                                            field.requesterFormFieldId = newValue;\r\n                                                            field.initialConfig.requesterFormFieldId = newValue;\r\n                                                        }\r\n                                                        let createRequesterField = Ext.getCmp('createRequesterField');\r\n                                                        if (createRequesterField && createRequesterField.setDisabled) {\r\n                                                            setDisabled.setDisabled(newValue != null);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            });\r\n\r\n                                            if (field.up('cloneablePanel')) {\r\n                                                propItems.push({'xtype': 'container', items: fieldButtons})\r\n                                            }\r\n\r\n                                            propItems.push({\r\n                                                xtype: 'button',\r\n                                                text: 'свойства поля (JSON)',\r\n                                                hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                                                handler: function () {\r\n                                                    let fieldJSON = field.initialConfig;\r\n                                                    fieldJSON.height = undefined;\r\n                                                    fieldJSON.width = undefined;\r\n                                                    fieldJSON.labelWidth = undefined;\r\n                                                    fieldJSON.margin = undefined;\r\n                                                    fieldJSON.border = undefined;\r\n                                                    fieldJSON.flex = undefined;\r\n                                                    if (fieldJSON.name && fieldJSON.name.indexOf('].') !== -1) {\r\n                                                        fieldJSON.name = field.name.split('].')[1];\r\n                                                    }\r\n                                                    Ext.widget('window', {\r\n                                                        title: 'Свойства поля',\r\n                                                        height: '300',\r\n                                                        width: '500',\r\n                                                        layout: 'fit',\r\n                                                        buttons: [\r\n                                                            {\r\n                                                                text: 'Cохранить',\r\n                                                                handler: function (btn) {\r\n                                                                    let getJSONbtn = Ext.getCmp('getFormJSON');\r\n\r\n                                                                    let formJSON = getJSONbtn.getJSON();\r\n                                                                    let originalItemValue = JSON.stringify(field.initialConfig);\r\n                                                                    let editedItemValue = btn.up('window').down('textarea').getValue();\r\n\r\n                                                                    if (originalItemValue !== editedItemValue) {\r\n\r\n                                                                        let itemNumber = formJSON.indexOf(originalItemValue);\r\n                                                                        if (itemNumber !== -1) {\r\n                                                                            formJSON[itemNumber] = editedItemValue;\r\n                                                                        } else {\r\n                                                                            formJSON.forEach(function (value, index) {\r\n                                                                                if (value.indexOf(originalItemValue) !== -1) {\r\n                                                                                    let fieldParts = value.split(originalItemValue);\r\n                                                                                    formJSON[index] = fieldParts[0] + editedItemValue + fieldParts[1];\r\n\r\n                                                                                }\r\n                                                                            });\r\n                                                                        }\r\n                                                                        let editAreaValue = '[' + formJSON.toString() + ']';\r\n\r\n                                                                        reloadForm(btn, editAreaValue)\r\n                                                                    } else {\r\n                                                                        btn.up('window').close();\r\n                                                                    }\r\n                                                                }\r\n                                                            },\r\n                                                            {\r\n                                                                text: 'Закрыть',\r\n                                                                handler: function (btn) {\r\n                                                                    btn.up('window').close();\r\n                                                                }\r\n                                                            }\r\n                                                        ],\r\n                                                        items: [{\r\n                                                            xtype: 'textarea',\r\n                                                            allowRestrictedSymbols: true,\r\n                                                            value: JSON.stringify(fieldJSON)\r\n                                                        }]\r\n                                                    }).show();\r\n                                                }\r\n                                            });\r\n                                            window.add(propItems);\r\n                                        },\r\n\r\n                                        focus: function (propsWindow) {\r\n                                            let comboGrid = Ext.getCmp('comboGrid');\r\n                                            let height = 0;\r\n                                            let query = Ext.ComponentQuery.query('component', propsWindow);\r\n\r\n                                            for (let i = 0; i < query.length; i++) {\r\n                                                let item = query[i];\r\n                                                if (!item.up('grid') && !item.isPanel) {\r\n                                                    height += item.getSize()['height'];\r\n                                                }\r\n                                            }\r\n\r\n                                            if (comboGrid) {\r\n                                                comboGrid.setHeight(propsWindow.height - height - 5);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                                newWindow.showAt(5 + Ext.getBody().getWidth() * 0.685, editFormPanel.el.getY() + 5);\r\n                            }\r\n\r\n                            if (!container.items) {\r\n                                field.getEl().on('click', function () {\r\n                                    if (field.name.indexOf('.') !== -1) {\r\n                                        field.name = field.name.split('.')[1];\r\n                                    }\r\n                                    oncontainerClick(field);\r\n                                });\r\n                            } else if ((container.items.first() && container.items.first().xtype !== \"cloneablePanel\" && container.xtype !== \"cloneablePanel\") || container.items.length === 0) {\r\n                                container.getEl().on('click', function () {\r\n                                    oncontainerClick(field);\r\n                                });\r\n                            } else {\r\n\r\n                                container.on('boxready', function () {\r\n                                    let toolbars = Ext.ComponentQuery.query('toolbar', container);//down() не канает, юзет поиск в глубину\r\n                                    if (container.xtype === \"cloneablePanel\") {\r\n                                        for (let i = 0; i < toolbars.length; i++) {\r\n                                            if (toolbars[i].ownerCt.id === container.id) {\r\n                                                toolbars[i].getEl().on('click', function () {\r\n                                                    oncontainerClick(field);\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        for (let i = 0; i < toolbars.length; i++) {\r\n                                            if (toolbars[i].ownerCt.id === container.items.first().id) {\r\n                                                toolbars[i].getEl().on('click', function () {\r\n                                                    oncontainerClick(field);\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                });\r\n\r\n                                if (container.xtype === \"cloneablePanel\") {\r\n                                    container.items.each(function (item) {\r\n                                        item.on('boxready', function () {\r\n\r\n                                            item.getEl().on('click', function () {\r\n                                                if (item.name && item.name.indexOf('.') !== -1) {\r\n                                                    let nameParts = item.name.split('.');\r\n                                                    item.name = nameParts[nameParts.length - 1];\r\n                                                }\r\n                                                oncontainerClick(item);\r\n                                            })\r\n                                        });\r\n                                    });\r\n                                } else {\r\n                                    container.items.first().items.each(function (item) {\r\n                                        if (item.xtype !== \"cloneablePanel\") {\r\n\r\n                                            item.on('boxready', function () {\r\n                                                item.getEl().on('click', function () {\r\n                                                    if (item.name && item.name.indexOf('.') !== -1) {\r\n                                                        let nameParts = item.name.split('.');\r\n                                                        item.name = nameParts[nameParts.length - 1];\r\n                                                    }\r\n                                                    oncontainerClick(item);\r\n                                                })\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                            }\r\n                        });\r\n                    };\r\n\r\n                    if (field.items) {\r\n                        for (let i = 0; i < field.items.length; i++) {\r\n                            if (field.items[i].xtype === 'cloneablePanel') {\r\n\r\n                                let clPanel = field.items[i];\r\n                                let nestedPanel = Ext.widget(clPanel);\r\n                                nestedPanel.on('added', function () {\r\n                                    fieldRenderFn(nestedPanel, nestedPanel);\r\n                                });\r\n                                field.items[i] = nestedPanel;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let newField = {\r\n                        xtype: 'fieldcontainer',\r\n                        layout: 'hbox',\r\n                        margin: 5,\r\n                        listeners: {\r\n                            resize: function (container) {\r\n                                let propWindow = Ext.getCmp('fieldProperties');\r\n                                let filler = container.down('#filler');\r\n                                if (propWindow && filler) {\r\n                                    propWindow.setPosition(5 + Ext.getBody().getWidth() * 0.685, editFormPanel.el.getY() + 5);\r\n                                    propWindow.setSize(Ext.getBody().getWidth() * 0.295, editFormPanel.getSize().height - 5)\r\n                                }\r\n                            },\r\n                            added: function (container) {\r\n                                fieldRenderFn(container, container.items.first());\r\n                            }\r\n                        },\r\n                        defaults: {\r\n                            flex: 5\r\n                        },\r\n                        items: [field].concat(fieldButtons)\r\n                    };\r\n\r\n                    let selectedField = document.querySelector('.fieldFocus');\r\n                    let cloneId = null;\r\n\r\n                    if (selectedField && selectedField.id && selectedField.id.indexOf('cloneablePanel') !== -1) {\r\n                        cloneId = selectedField.id;\r\n                    } else if (selectedField && selectedField.parentNode && selectedField.parentNode.id && selectedField.parentNode.id.indexOf('cloneablePanel') !== -1) {\r\n                        cloneId = selectedField.parentNode.id.split('-body').join('');\r\n                    }\r\n\r\n                    if (!cloneId) {\r\n                        if (!index) {\r\n                            try {\r\n                                let field1 = Ext.getCmp(selectedField.id);\r\n                                index = field1.ownerCt.ownerCt.items.indexOf(field1.ownerCt) + 1;\r\n                            } catch (e) {\r\n\r\n                            }\r\n                        }\r\n\r\n                        editFormPanel.insert(index, newField);\r\n                    } else {\r\n                        let newFieldComp = Ext.widget(newField.items[0]);\r\n                        newFieldComp.height = undefined;\r\n                        let clonePanel = Ext.getCmp(cloneId);\r\n\r\n                        newFieldComp.on('added', function () {\r\n                            fieldRenderFn(newFieldComp, newFieldComp);\r\n                        });\r\n\r\n                        if (newFieldComp.xtype === 'cloneablePanel') {\r\n                            if (clonePanel.ownerCt.xtype === 'cloneablePanel') {\r\n                                return;//maximum nesting level\r\n                            }\r\n                            newFieldComp.layout = 'anchor';\r\n                            newFieldComp.anchor = '90% 90%'\r\n                        }\r\n\r\n                        if (!index) {\r\n                            try {\r\n                                let field2 = Ext.getCmp(selectedField.id);\r\n                                index = field2.ownerCt.items.indexOf(field2) + 1;\r\n                            } catch (e) {\r\n\r\n                            }\r\n                        }\r\n                        clonePanel.insert(index, newFieldComp);\r\n                    }\r\n\r\n                    editFormPanel.scroller !== 0 ? editFormPanel.body.scrollTo('top', editFormPanel.scroller) : null;\r\n                },\r\n                height: '98%',\r\n                layout: 'anchor',\r\n                defaults: {\r\n                    anchor: '80%',\r\n                    margin: 3\r\n                },\r\n                flex: 1,\r\n                items: [\r\n                    {\r\n                        id: 'departmentFieldContainer',\r\n                        xtype: 'fieldcontainer',\r\n                        layout: 'anchor',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        defaults: {\r\n                            anchor: '100%'\r\n                        },\r\n                        items: [\r\n                            configurationFullInfo.configuration.isRemoteSmbOn ? {\r\n                                id: 'networkFolder',\r\n                                xtype: 'textfield',\r\n                                fieldLabel: 'Сетевая папка(для сохранения)',\r\n                                labelWidth: '65px',\r\n                                deleteDoubleSpaces: true,\r\n                                enforceMaxLength: true,\r\n                                maxLength: 255\r\n                            } : null,\r\n                            {\r\n                                id: 'isSubserviceCheckbox',\r\n                                xtype: 'checkbox',\r\n                                name: 'isSubservice',\r\n                                fieldLabel: 'Является подуслугой',\r\n                                listeners: {\r\n                                    change: function (item, newValue) {\r\n                                        let successCallback = function () {\r\n                                            let parentServiceNameField = Ext.getCmp('parentServiceNameField');\r\n                                            if (newValue === true) {\r\n                                                parentServiceNameField.show();\r\n                                            } else {\r\n                                                parentServiceNameField.hide();\r\n                                                removeParentService();\r\n                                            }\r\n                                        };\r\n                                        let failureCallback = function () {\r\n                                            Ext.Msg.alert('Ошибка', \"На эту услугу уже были созданы заявления, \" +\r\n                                                \"поэтому изменить данный параметр невозможно. \" +\r\n                                                \"Пожалуйста, создайте новую услугу на основе данной.\");\r\n                                            item.suspendEvents(false);\r\n                                            item.setValue(!newValue);\r\n                                            item.resumeEvents();\r\n                                        };\r\n                                        if (params['lid'] && params['eid']) {\r\n                                            Ext.Ajax.request({\r\n                                                url: 'action/customservice/mutability/' + params['lid'] + ':' + params['eid'],\r\n                                                success: function (response) {\r\n                                                    if (response.responseText === 'true') {\r\n                                                        successCallback();\r\n                                                    } else {\r\n                                                        failureCallback();\r\n                                                    }\r\n                                                },\r\n                                                failure: function (response) {\r\n                                                    failureCallback();\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            successCallback();\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            },\r\n                            {\r\n                                id: 'parentServiceNameField',\r\n                                xtype: 'triggerfield',\r\n                                name: 'parentServiceName',\r\n                                fieldLabel: 'Основная услуга',\r\n                                labelWidth: '65px',\r\n                                triggerCls: 'x-form-clear-trigger',\r\n                                emptyText: '[Выбрать]',\r\n                                allowBlank: true,\r\n                                hidden: true,\r\n                                onTriggerClick: function () {\r\n                                    removeParentService();\r\n                                },\r\n                                listeners: {\r\n                                    focus: function () {\r\n                                        showParentServiceGrid();\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                id: 'subservicesButton',\r\n                                xtype: 'button',\r\n                                text: 'Подуслуги',\r\n                                hidden: true,\r\n                                handler: function () {\r\n                                    showChildrenServicesGrid();\r\n                                }\r\n                            },\r\n                            {\r\n                                id: 'departmentNameField',\r\n                                xtype: 'triggerfield',\r\n                                name: 'departmentName',\r\n                                fieldLabel: 'Ведомство',\r\n                                labelWidth: '65px',\r\n                                triggerCls: 'x-form-clear-trigger',\r\n                                emptyText: '[Выбрать]',\r\n                                onTriggerClick: function () {\r\n                                    this.setValue(null);\r\n                                    this.up('fieldcontainer').departmentId = null;\r\n                                    Ext.tip.QuickTipManager.unregister('departmentNameField');\r\n                                    Ext.getCmp('MfcChooseDefaultSubDepartmentCustomServiceFormButtonId').hide();\r\n                                    Ext.getCmp('frguCodesButton').disable();\r\n                                },\r\n                                listeners: {\r\n                                    focus: function () {\r\n                                        showServiceTree();\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                name: 'groupTitle',\r\n                                fieldLabel: 'Папка',\r\n                                labelWidth: '65px',\r\n                                deleteDoubleSpaces: true,\r\n                                enforceMaxLength: true,\r\n                                maxLength: 255\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                id: 'serviceCode',\r\n                                enforceMaxLength: true,\r\n                                labelWidth: '65px',\r\n                                maxLength: 255,\r\n                                fieldLabel: 'Код услуги'\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                id: 'smartRouteCode',\r\n                                enforceMaxLength: true,\r\n                                labelWidth: '65px',\r\n                                maxLength: 255,\r\n                                fieldLabel: 'Внешний код'\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                id: 'frguServiceId',\r\n                                enforceMaxLength: true,\r\n                                labelWidth: '65px',\r\n                                maxLength: 255,\r\n                                fieldLabel: 'Код МКГУ'\r\n                            },\r\n                            FormEditorFields.serviceTypeField,\r\n                            FormEditorFields.handlerType,\r\n                            !ESFormEditorHelper.isEsFormEditor() ? FormEditorFields.level : null,\r\n                            {\r\n                                xtype: 'button',\r\n                                disabled: Ext.Object.fromQueryString(location.search).newForm !== undefined,\r\n                                text: Ext.Object.fromQueryString(location.search).newForm === undefined ? 'Регламентные сроки' : 'Регламентные сроки<br/>(Доступно после сохранения услуги)',\r\n                                handler: function () {\r\n                                    Ext.create('ServiceTermDialog', {\r\n                                        valueHolder: Ext.getCmp('compositeServiceTermString'),\r\n                                        formJson: '[' + Ext.getCmp('getFormJSON').getJSON() + ']',\r\n                                        subDepartmentList: Ext.getCmp('editorMainPanel').subDepartment,\r\n                                        mfcList: Ext.getCmp('editorMainPanel').mfc,\r\n                                    });\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'container',\r\n                                border: false,\r\n                                margin: '0 0 6 0',\r\n                                layout: {\r\n                                    type: 'hbox',\r\n                                    pack: 'center'\r\n                                },\r\n                                items: [\r\n                                    {\r\n                                        xtype: 'text',\r\n                                        id: 'compositeServiceTermString',\r\n                                        text: '',\r\n                                        serviceTerms: [],\r\n                                        serviceTermKinds: [],\r\n                                        serviceTermSameDay: false,\r\n                                        plusOneDay: false,\r\n                                        updateText: function () {\r\n                                            this.setText(Util.createCompositeServiceTermString(this.serviceTerms,\r\n                                                this.serviceTermSameDay));\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                xtype: 'displayfield', value: 'Адрес доставки'\r\n                            },\r\n                            // {displayLabel: 'Адрес доставки'},\r\n                            {\r\n                                xtype: 'fieldcontainer',\r\n                                layout: 'hbox',\r\n                                items: [\r\n                                    {\r\n                                        xtype: 'triggerfield',\r\n                                        id: 'sendMethod',\r\n                                        name: 'sendMethod',\r\n                                        // fieldLabel:'Адрес доставки',\r\n                                        allowBlank: false,\r\n                                        labelWidth: '65px',\r\n                                        triggerCls: 'x-form-clear-trigger',\r\n                                        emptyText: '[Выбрать]',\r\n                                        onTriggerClick: function () {\r\n                                            this.setValue(null);\r\n                                            let sitCode = Ext.getCmp('sitServiceCode');\r\n                                            let smartRouteGuid = Ext.getCmp('smartRouteDepartmentGuid');\r\n                                            let template = Ext.getCmp('sentToVisTemplate');\r\n                                            let requestTemplate = Ext.getCmp('sentToVisRequestTemplate');\r\n                                            let allowDelay = Ext.getCmp('allowDelay');\r\n                                            let fastSending = Ext.getCmp('fastSending');\r\n                                            let useNotificationService = Ext.getCmp('useNotificationService');\r\n                                            let sendToCallCenter = Ext.getCmp('sendToCallCenter');\r\n                                            let adapter = Ext.getCmp('adapter');\r\n                                            let createAdapterForm = Ext.getCmp('createAdapterForm');\r\n                                            createAdapterForm.hide();\r\n                                            adapter.setValue();\r\n                                            sitCode.setValue();\r\n                                            sitCode.disable();\r\n                                            sitCode.hide();\r\n                                            smartRouteGuid.setValue();\r\n                                            smartRouteGuid.disable();\r\n                                            smartRouteGuid.hide();\r\n                                            template.setValue();\r\n                                            template.disable();\r\n                                            template.hide();\r\n                                            requestTemplate.setValue();\r\n                                            requestTemplate.disable();\r\n                                            requestTemplate.hide();\r\n                                            allowDelay.setValue(false);\r\n                                            allowDelay.hide();\r\n                                            fastSending.setValue(false);\r\n                                            fastSending.hide();\r\n                                            useNotificationService.hide();\r\n                                            useNotificationService.setValue(false);\r\n                                            sendToCallCenter.hide();\r\n                                            sendToCallCenter.setValue(false);\r\n                                        },\r\n                                        listeners: {\r\n                                            focus: function (field) {\r\n                                                let endpointDialog = Ext.create('Ext.window.Window', {\r\n                                                    title: 'Выберите адрес доставки',\r\n                                                    layout: 'fit',\r\n                                                    modal: true,\r\n                                                    items: [{\r\n                                                        xtype: 'EndpointGrid',\r\n                                                        height: 600,\r\n                                                        width: 800,\r\n                                                        isFromFormEditor: true,\r\n                                                        selectEndpointCallback: function (endpointCode) {\r\n                                                            field.setRawValue(endpointCode);\r\n                                                            endpointDialog.close();\r\n                                                            field.validate();\r\n                                                            let sitCode = Ext.getCmp('sitServiceCode');\r\n                                                            let adapter = Ext.getCmp('adapter');\r\n                                                            let createAdapterForm = Ext.getCmp('createAdapterForm');\r\n                                                            let smartRouteGuid = Ext.getCmp('smartRouteDepartmentGuid');\r\n                                                            let template = Ext.getCmp('sentToVisTemplate');\r\n                                                            let requestTemplate = Ext.getCmp('sentToVisRequestTemplate');\r\n                                                            let allowDelay = Ext.getCmp('allowDelay');\r\n                                                            let fastSending = Ext.getCmp('fastSending');\r\n                                                            let useNotificationService = Ext.getCmp('useNotificationService');\r\n                                                            let sendToCallCenter = Ext.getCmp('sendToCallCenter');\r\n                                                            let notEditableInProcess = Ext.getCmp('notEditableInProcess');\r\n                                                            if (endpointCode != null && endpointCode !== undefined && endpointCode !== 'NONE') {\r\n                                                                template.show();\r\n                                                                template.enable();\r\n                                                                requestTemplate.show();\r\n                                                                requestTemplate.enable();\r\n                                                                allowDelay.show();\r\n                                                                fastSending.show();\r\n                                                                useNotificationService.show();\r\n                                                                sendToCallCenter.show();\r\n                                                            } else {\r\n                                                                createAdapterForm.hide();\r\n                                                                adapter.setValue();\r\n                                                                template.setValue();\r\n                                                                template.disable();\r\n                                                                template.hide();\r\n                                                                requestTemplate.setValue();\r\n                                                                requestTemplate.disable();\r\n                                                                requestTemplate.hide();\r\n                                                                allowDelay.hide();\r\n                                                                allowDelay.setValue(false);\r\n                                                                fastSending.hide();\r\n                                                                fastSending.setValue(false);\r\n                                                                useNotificationService.hide();\r\n                                                                useNotificationService.setValue(false);\r\n                                                                sendToCallCenter.hide();\r\n                                                                sendToCallCenter.setValue(false);\r\n                                                            }\r\n                                                            switch (endpointCode) {\r\n                                                                case \"sit\": {\r\n                                                                    sitCode.enable();\r\n                                                                    sitCode.show();\r\n                                                                    smartRouteGuid.disable();\r\n                                                                    smartRouteGuid.hide();\r\n                                                                    smartRouteGuid.setValue();\r\n                                                                    adapter.setValue();\r\n                                                                    createAdapterForm.hide();\r\n                                                                    break;\r\n                                                                }\r\n                                                                case \"smartRoute\": {\r\n                                                                    smartRouteGuid.enable();\r\n                                                                    smartRouteGuid.show();\r\n                                                                    sitCode.disable();\r\n                                                                    sitCode.hide();\r\n                                                                    sitCode.setValue();\r\n                                                                    adapter.setValue();\r\n                                                                    createAdapterForm.hide();\r\n                                                                    break;\r\n                                                                }\r\n                                                                case \"smart_route_integration\": {\r\n                                                                    sitCode.disable();\r\n                                                                    sitCode.hide();\r\n                                                                    sitCode.setValue();\r\n                                                                    smartRouteGuid.disable();\r\n                                                                    smartRouteGuid.hide();\r\n                                                                    smartRouteGuid.setValue();\r\n                                                                    template.enable();\r\n                                                                    requestTemplate.setValue();\r\n                                                                    requestTemplate.disable();\r\n                                                                    requestTemplate.hide();\r\n                                                                    allowDelay.hide();\r\n                                                                    allowDelay.setValue(false);\r\n                                                                    notEditableInProcess.hide();\r\n                                                                    notEditableInProcess.setValue(false);\r\n                                                                    createAdapterForm.show();\r\n                                                                    break;\r\n                                                                }\r\n                                                                default: {\r\n                                                                    sitCode.disable();\r\n                                                                    sitCode.hide();\r\n                                                                    sitCode.setValue();\r\n                                                                    adapter.setValue();\r\n                                                                    createAdapterForm.hide();\r\n                                                                    smartRouteGuid.disable();\r\n                                                                    smartRouteGuid.hide();\r\n                                                                    smartRouteGuid.setValue();\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }]\r\n                                                }).show();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                xtype: 'hidden',\r\n                                id: 'adapter',\r\n                                value: null\r\n                            },\r\n                            {\r\n                                xtype: 'button',\r\n                                hidden: true,\r\n                                id: 'createAdapterForm',\r\n                                text: 'Добавить поля адаптера',\r\n                                handler: function () {\r\n                                    let adapter = Ext.getCmp('adapter').getValue(),\r\n                                        tools = Ext.getCmp('editTools');\r\n                                    if (!adapter) {\r\n                                        notify(\"Ошибка\", \"Адаптер не выбран\");\r\n                                        return;\r\n                                    }\r\n                                    let myMask = new Ext.LoadMask(Ext.getBody(), {\r\n                                        msg: 'Пожалуйста подождите...'\r\n                                    });\r\n                                    myMask.show();\r\n\r\n                                    // Макска не появлется, если код без задержки выполняется, по этому Timeout\r\n                                    setTimeout(function () {\r\n                                        let successFn = function (form) {\r\n                                            SmartRouteUtils.parseAndCreateForm(form, tools);\r\n                                            myMask.hide();\r\n                                        };\r\n                                        let errorFn = function () {\r\n                                            myMask.hide();\r\n                                        };\r\n                                        SmartRouteUtils.getForm(adapter, successFn, errorFn);\r\n                                    }, 10);\r\n                                }\r\n                            },\r\n                            {\r\n                                id: 'fastSending',\r\n                                xtype: 'checkbox',\r\n                                fieldLabel: 'Быстрая отправка в ВИС',\r\n                                allowBlank: true,\r\n                                name: 'fastSending',\r\n                                hidden: true,\r\n                                inputValue: true,\r\n                                uncheckedValue: false\r\n                            },\r\n                            CustomUtils.SmartRouteDepartmentsCombobox,\r\n                            CustomUtils.sitServiceCodeTextField,\r\n                            {\r\n                                xtype: 'textfield',\r\n                                fieldLabel: 'Шаблон xml',\r\n                                id: 'sentToVisTemplate',\r\n                                hidden: true,\r\n                                allowBlank: false,\r\n                                labelWidth: '65px',\r\n                                listeners: {\r\n                                    focus: function (field) {\r\n                                        let sentToVisTemplateDialog = Ext.create('Ext.window.Window', {\r\n                                            title: 'Выберите шаблон для отправки в ВИС',\r\n                                            layout: 'fit',\r\n                                            modal: true,\r\n                                            items: [\r\n                                                {\r\n                                                    xtype: 'CustomTemplateGrid',\r\n                                                    height: 600,\r\n                                                    width: 800,\r\n                                                    selectTemplateCallback: function (templateName) {\r\n                                                        field.setRawValue(templateName);\r\n                                                        sentToVisTemplateDialog.close();\r\n                                                        field.validate();\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }).show();\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                fieldLabel: 'Шаблон req-xml',\r\n                                id: 'sentToVisRequestTemplate',\r\n                                hidden: true,\r\n                                allowBlank: false,\r\n                                labelWidth: '65px',\r\n                                listeners: {\r\n                                    focus: function (field) {\r\n                                        let sentToVisTemplateDialog = Ext.create('Ext.window.Window', {\r\n                                            title: 'Выберите запроса шаблон для отправки в ВИС',\r\n                                            layout: 'fit',\r\n                                            modal: true,\r\n                                            items: [\r\n                                                {\r\n                                                    xtype: 'CustomTemplateGrid',\r\n                                                    height: 600,\r\n                                                    width: 800,\r\n                                                    selectTemplateCallback: function (templateName) {\r\n                                                        field.setRawValue(templateName);\r\n                                                        sentToVisTemplateDialog.close();\r\n                                                        field.validate();\r\n                                                    }\r\n                                                }\r\n                                            ]\r\n                                        }).show();\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'allowDelay',\r\n                                fieldLabel: 'Разрешить отложенную доставку в ВИС',\r\n                                allowBlank: true,\r\n                                hidden: true,\r\n                                name: 'allowDelay',\r\n                                inputValue: true,\r\n                                uncheckedValue: false\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'sendToCallCenter',\r\n                                fieldLabel: 'Автоматический перевод в Контакт-Центр',\r\n                                allowBlank: true,\r\n                                hidden: true,\r\n                                name: 'sendToCallCenter',\r\n                                inputValue: true,\r\n                                uncheckedValue: false\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'useNotificationService',\r\n                                fieldLabel: 'Использовать сервис оповещений',\r\n                                hidden: true,\r\n                                name: 'useNotificationService',\r\n                                checked: false,\r\n                                inputValue: true,\r\n                                uncheckedValue: false,\r\n                                listeners: {\r\n                                    change: function (field, newValue) {\r\n                                        let notificationService = Ext.getCmp('notificationService');\r\n                                        if (notificationService) {\r\n                                            if (newValue === true) {\r\n                                                notificationService.setVisible(newValue);\r\n                                                notificationService.setValue('');\r\n                                            } else {\r\n                                                notificationService.setVisible(newValue);\r\n                                                notificationService.setValue('');\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'textfield',\r\n                                id: 'notificationService',\r\n                                enforceMaxLength: true,\r\n                                hidden: true,\r\n                                labelWidth: '75px',\r\n                                maxLength: 255,\r\n                                fieldLabel: 'Код оповещения'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'sendByCourier',\r\n                                fieldLabel: 'Отправлять курьером',\r\n                                allowBlank: true,\r\n                                hidden: true,\r\n                                name: 'sendByCourier',\r\n                                checked: true,\r\n                                inputValue: true,\r\n                                uncheckedValue: false\r\n                            },\r\n                            {\r\n                                xtype: 'combo',\r\n                                fieldLabel: 'Дополнительные печатные формы',\r\n                                name: 'printCodes',\r\n                                valueField: 'code',\r\n                                displayField: 'title',\r\n                                id: 'servicePrintCodes',\r\n                                editable: false,\r\n                                listeners: {\r\n                                    change: function (combo, newVal) {\r\n                                        if (newVal !== \"\") {\r\n                                            if (newVal === combo.getRawValue()) {\r\n                                                combo.setValue(combo.getValue().join('').split(','));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                },\r\n                                store: new Ext.data.JsonStore({\r\n                                        \"fields\": [\"title\", \"code\"],\r\n                                        idProperty: 'id',\r\n                                        autoLoad: true,\r\n                                        proxy: {\r\n                                            type: 'CPGUAjax',\r\n                                            url: 'action/getPrintForms',\r\n                                            reader: {\r\n                                                type: 'json',\r\n                                                root: 'records',\r\n                                                totalProperty: 'total'\r\n                                            },\r\n                                            extraParams: {\r\n                                                serviceEid: \"allPrintTemplates\",\r\n                                                serviceLid: null\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ),\r\n                                multiSelect: true\r\n                            },\r\n                            {\r\n                                xtype: 'combo',\r\n                                fieldLabel: 'Выбрать шаблон выгрузки для пакета',\r\n                                itemId: 'serviceFormXmlTemplate',\r\n                                name: 'serviceFormXmlTemplate',\r\n                                valueField: 'name',\r\n                                displayField: 'name',\r\n                                id: 'serviceFormXmlTemplate',\r\n                                listConfig: {\r\n                                    listeners: {\r\n                                        beforeshow: function (picker) {\r\n                                            let data = picker.up('combobox').getStore().data.items;\r\n                                            let symbolOnPixel = 6.75;\r\n                                            for (let i = 0; i < data.length; i++) {\r\n                                                let maxLength = Math.ceil(data[i].data['name'].length * symbolOnPixel);\r\n                                                if (picker.minWidth < maxLength) {\r\n                                                    picker.minWidth = maxLength;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                },\r\n                                editable: false,\r\n                                store: Ext.data.JsonStore({\r\n                                    autoLoad: false,\r\n                                    proxy: {\r\n                                        type: 'direct',\r\n                                        directFn: templateService.getFormXmlTemplates\r\n                                    },\r\n                                    fields: ['id', 'name'],\r\n                                    sorters: {property: 'name'}\r\n                                })\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'realEstateInfoFieldAdded',\r\n                                fieldLabel: 'Используется объект недвижимости',\r\n                                listeners: {\r\n                                    change: function (field, newValue) {\r\n                                        if (!newValue) {\r\n                                            return newValue;\r\n                                        }\r\n                                        let editTools = Ext.getCmp('editTools');\r\n                                        editTools.constructField({\r\n                                            xtype: 'cloneablePanel',\r\n                                            items: [\r\n                                                {\r\n                                                    xtype: 'label',\r\n                                                    text: \"Объект недвижимости\"\r\n                                                }\r\n                                            ],\r\n                                            prefix: 'realEstateInfoClone',\r\n                                            listenersLogic: {\r\n                                                event: 'added',\r\n                                                newListener: \"let orderForm = Ext.getCmp('orderFormPanel').down('OrderForm');\\n\" +\r\n                                                    \"let realEstateInfoField = Ext.create('RealEstateInfoField',\" +\r\n                                                    \"{itemId: 'realEstateInfoFieldId',\" +\r\n                                                    \" name: 'realEstateInfo', border: false, width: '100%',\" +\r\n                                                    \" requesterId: orderForm.requesterId, value: orderForm.realEstateInfo});\\n\" +\r\n                                                    \"thisField.add(realEstateInfoField);\\n thisField.doLayout();\\n\"\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'pkPvdNumberFieldAdded',\r\n                                fieldLabel: 'Используется номер ПК ПВД',\r\n                                listeners: {\r\n                                    change: function (checkbox, newValue) {\r\n                                        if (!newValue) {\r\n                                            return newValue;\r\n                                        }\r\n                                        let editTools = Ext.getCmp('editTools');\r\n                                        editTools.constructField({\r\n                                            xtype: 'textfield',\r\n                                            id: 'pkPvdNumberFieldId',\r\n                                            name: 'pkPvdNumber',\r\n                                            fieldLabel: 'Номер ПК ПВД',\r\n                                            minLength: 15,\r\n                                            maxLength: 255,\r\n                                            submitValue: false,\r\n                                            anchor: '95%',\r\n                                            listenersLogic: {\r\n                                                event: 'added',\r\n                                                newListener: \"let orderForm = Ext.getCmp('orderFormPanel').down('OrderForm');\\n\" +\r\n                                                    \"thisField.setValue(orderForm.pkPvdNumber);\\n\"\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'pkPvdNumberFieldRequired',\r\n                                fieldLabel: 'Обязательность поля номер ПК ПВД',\r\n                                disabled: true\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'useRequesterBlock',\r\n                                fieldLabel: 'Использовать общий блок заявителя'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                checked: true,\r\n                                id: 'useDocumentsGrid',\r\n                                fieldLabel: 'Использовать таблицу документов'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'notRender',\r\n                                fieldLabel: 'Скрыть услугу'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'complexEnable',\r\n                                fieldLabel: 'Возможно оказывать в рамках комплексного запроса'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'isPkpvd',\r\n                                fieldLabel: 'Услуга интегрирована с ПК ПВД'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'notRelevant',\r\n                                fieldLabel: 'Не актуальна'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'syncService',\r\n                                fieldLabel: 'Быстрый бизнес процесс'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'dontUseTemplateHeader',\r\n                                fieldLabel: 'Не печатать номер заявления'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'paid',\r\n                                fieldLabel: 'Услуга платная'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'onlineOnly',\r\n                                fieldLabel: 'Доступна в оффлайн режиме',\r\n                                inputValue: false,\r\n                                uncheckedValue: true\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'interdepartmentalRequestDocuments',\r\n                                fieldLabel: 'Документы могут быть получены по каналам СМЭВ',\r\n                                inputValue: false,\r\n                                uncheckedValue: true\r\n                            },\r\n                            {\r\n                                id: 'notEditableInProcess',\r\n                                xtype: 'checkbox',\r\n                                fieldLabel: 'Запрет на редактирование в процессе',\r\n                                allowBlank: true,\r\n                                name: 'notEditableInProcess'\r\n                            },\r\n                            {\r\n                                xtype: 'checkbox',\r\n                                id: 'syncMdm',\r\n                                fieldLabel: 'Отправлять данные в МДМ'\r\n                            }\r\n                        ],\r\n\r\n                        setFromCustomServiceInfo: function (serviceInfo) {\r\n                            let me = this;\r\n                            if (serviceInfo) {\r\n                                if (serviceInfo.department) {\r\n                                    chooseCustomServiceDepartment(serviceInfo.department.id,\r\n                                        serviceInfo.department.title);\r\n                                }\r\n\r\n                                if (serviceInfo.parentServiceEid) {\r\n                                    chooseParentService(serviceInfo.parentServiceLid, serviceInfo.parentServiceEid,\r\n                                        serviceInfo.parentServiceTitle);\r\n                                }\r\n\r\n                                me.down('[name=groupTitle]').setValue(serviceInfo.groupTitle);\r\n                            }\r\n                        }\r\n                    },\r\n                    ESFormEditorHelper.isEsFormEditor() ? FormEditorFields.level : null,\r\n                    {\r\n                        xtype: 'fieldcontainer',\r\n                        id: 'firstServiceButtons',\r\n                        layout: 'anchor',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        defaults: {\r\n                            anchor: '100%'\r\n                        },\r\n                        items: [\r\n                            {\r\n                                xtype: \"button\",\r\n                                itemId: 'adaptersButton',\r\n                                text: 'Межведомственные запросы',\r\n                                handler: function () {\r\n                                    let windowParams = Ext.Object.fromQueryString(location.search);\r\n                                    if (windowParams.eid) {\r\n                                        AdapterUtils.createServiceAdapterGrid(windowParams.lid, windowParams.eid);\r\n                                    } else {\r\n                                        let saveFormButton = Ext.getCmp('saveFormButton');\r\n\r\n                                        saveFormButton.handler(function (callback) {\r\n                                            window.history.replaceState('', '', Util.formEditor.format(callback.eid, callback.lid));\r\n                                            Ext.getCmp('ServiceReceptionPlaceFormButtonId').enable();\r\n                                            Ext.getCmp('MfcChooseComponentsCustomServiceFormButtonId').enable();\r\n                                            AdapterUtils.createServiceAdapterGrid(callback.lid, callback.eid);\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: \"button\",\r\n                                itemId: 'epguIntegrationButton',\r\n                                text: 'Связь с личным кабинетом ЕПГУ',\r\n                                handler: function () {\r\n                                    let windowParams = Ext.Object.fromQueryString(location.search);\r\n                                    if (windowParams.eid) {\r\n                                        EditEpguServiceRelationWindow.createEditEpguServiceRelationWindow(windowParams.eid, windowParams.lid);\r\n                                    } else {\r\n                                        let saveFormButton = Ext.getCmp('saveFormButton');\r\n\r\n                                        saveFormButton.handler(function (callback) {\r\n                                            window.history.replaceState('', '', Util.formEditor.format(callback.eid, callback.lid));\r\n                                            EditEpguServiceRelationWindow.createEditEpguServiceRelationWindow(callback.eid, callback.lid);\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'button',\r\n                                minWidth: '175',\r\n                                margin: '5 5 5 5',\r\n                                id: 'paymentsButton',\r\n                                disabled: Ext.Object.fromQueryString(location.search).newForm !== undefined,\r\n                                text: Ext.Object.fromQueryString(location.search).newForm === undefined ? 'Начисления' : 'Начисления <br/>(Доступно после сохранения услуги)',\r\n                                handler: function (btn) {\r\n                                    let eidField = Ext.Object.fromQueryString(location.search).eid;\r\n                                    let lidField = Ext.Object.fromQueryString(location.search).lid;\r\n                                    PaymentGridWindow.createPaymentGridWindow(eidField, lidField);\r\n                                }\r\n                            },\r\n                            {\r\n                                xtype: 'button',\r\n                                minWidth: '175',\r\n                                margin: '5 5 5 5',\r\n                                itemId: 'rejectionReasonsButton',\r\n                                disabled: Ext.Object.fromQueryString(location.search).newForm !== undefined,\r\n                                text: Ext.Object.fromQueryString(location.search).newForm === undefined ? 'Причины отказа' : 'Причины отказа <br/>(Доступно после сохранения услуги)',\r\n                                handler: function (btn) {\r\n                                    let eidField = Ext.Object.fromQueryString(location.search).eid;\r\n                                    let lidField = Ext.Object.fromQueryString(location.search).lid;\r\n                                    RejectionReasonAssignmentWindow.createWindow(eidField, lidField);\r\n                                }\r\n                            },\r\n                            configurationFullInfo.configuration.enableInterfaceThreeDotZero ? Ext.create('ResultDoc.FormButton', {\r\n                                id: 'ResultDocButton',\r\n                                eid: formEid,\r\n                                lid: formLid,\r\n                                isNew: !formEid\r\n                            }) : null\r\n                        ]\r\n                    },\r\n                    {\r\n                        xtype: 'checkboxgroup',\r\n                        id: 'requesterTypes',\r\n                        fieldLabel: 'Тип заявителя',\r\n                        allowBlank: false,\r\n                        columns: 1,\r\n                        msgTarget: 'under',\r\n                        blankText: 'Необходимо выбрать хотя бы один тип заявителя',\r\n                        labelAlign: 'top',\r\n                        labelStyle: \"font-weight : bold\",\r\n                        items: [\r\n                            {\r\n                                boxLabel: 'Физическое лицо',\r\n                                id: 'personCheckbox'\r\n                            },\r\n                            {\r\n                                boxLabel: 'Индивидуальный предприниматель',\r\n                                id: 'soleCheckbox'\r\n                            },\r\n                            {\r\n                                boxLabel: 'Юридическое лицо',\r\n                                id: 'legalCheckbox'\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        xtype: 'fieldcontainer',\r\n                        id: 'secondServiceButtons',\r\n                        layout: 'anchor',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        defaults: {\r\n                            anchor: '100%'\r\n                        },\r\n                        items: [\r\n                            Ext.create('ServiceReceptionPlace.FormButton', {\r\n                                id: 'ServiceReceptionPlaceFormButtonId',\r\n                                getEid: function () {\r\n                                    return Ext.Object.fromQueryString(location.search)['eid'];\r\n                                },\r\n                                getLid: function () {\r\n                                    return Ext.Object.fromQueryString(location.search)['lid'];\r\n                                },\r\n                                isNew: !formEid\r\n                            }),\r\n                            !ESFormEditorHelper.isEsFormEditor() ? FormEditorFields.getMfcChoose(formEid) : null,\r\n                            Ext.create('MfcChooseDefaultSubDepartment.CustomService.FormButton', {\r\n                                id: 'MfcChooseDefaultSubDepartmentCustomServiceFormButtonId',\r\n                                getEid: function () {\r\n                                    return Ext.Object.fromQueryString(location.search)['eid'];\r\n                                },\r\n                                getLid: function () {\r\n                                    return Ext.Object.fromQueryString(location.search)['lid'];\r\n                                },\r\n                                getDepartmentId: this.departmentId,\r\n                                isNew: !formEid,\r\n                                hidden: !this.departmentId\r\n                            }),\r\n                            Ext.create('Frgu.SetCodes.Button', {\r\n                                serviceEid: formEid,\r\n                                serviceLid: formLid,\r\n                                id: 'frguCodesButton',\r\n                                disabled: !formEid\r\n                            })\r\n                        ]\r\n                    },\r\n                    ESFormEditorHelper.isEsFormEditor() ? FormEditorFields.getMfcChoose(formEid) : null,\r\n                    {\r\n                        xtype: 'label',\r\n                        anchor: '100%',\r\n                        width: '100%',\r\n                        margin: 6,\r\n                        html: 'Инструменты<br>',\r\n                        style: {\r\n                            'text-align': 'center',\r\n                            'font-weight': 'bold',\r\n                            'font-size': '12'\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Заголовок',\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('fieldset');\r\n                            tools.constructField({\r\n                                xtype: 'fieldset',\r\n                                margin: 0,\r\n                                padding: 0,\r\n                                border: false,\r\n                                title: 'ЗАГОЛОВОК',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Текстовое поле',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('textfield');\r\n                            tools.constructField({\r\n                                xtype: 'textfield',\r\n                                fieldLabel: 'Текстовое поле',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Текстовая область',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('textarea');\r\n                            tools.constructField({\r\n                                xtype: 'textarea',\r\n                                fieldLabel: 'Текстовая область',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Поле даты',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('datefield');\r\n                            tools.constructField({\r\n                                xtype: 'datefield',\r\n                                fieldLabel: 'Поле даты',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Поле загрузки файла',\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('fileuploadpanel');\r\n                            tools.constructField({\r\n                                xtype: 'fileuploadpanel',\r\n                                text: 'Поле загрузки файла',\r\n                                fieldName: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Флажок (checkbox)',\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('checkbox');\r\n                            tools.constructField({\r\n                                xtype: 'checkbox',\r\n                                boxLabel: 'Флажок',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'button',\r\n                        text: 'Выпадающий список',\r\n                        handler: function (btn) {\r\n                            let tools = btn.up('#tools');\r\n                            let fieldName = tools.getFieldName('combobox');\r\n                            tools.constructField({\r\n                                xtype: 'combobox',\r\n                                fieldLabel: 'Выпадающий список',\r\n                                name: fieldName\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        xtype: 'fieldcontainer',\r\n                        layout: 'hbox',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        items: [\r\n                            {\r\n                                xtype: 'combo',\r\n                                labelAlign: 'top',\r\n                                queryMode: \"local\",\r\n                                displayField: \"name\",\r\n                                valueField: \"value\",\r\n                                editable: false,\r\n                                flex: 1,\r\n                                store: {\r\n                                    \"fields\": [\"name\", \"value\"],\r\n                                    \"data\": [\r\n                                        {name: 'Текстовая метка', value: 'label'},\r\n                                        {name: 'КЛАДР', value: 'KLADR'},\r\n                                        {name: 'Клонируемая панель', value: 'cloneablePanel'},\r\n                                        {name: 'Клонируемая панель с заполнением', value: 'cloneablePanelWithFill'},\r\n                                        {name: 'Клонируемый документ', value: 'cloneableUpload'}\r\n                                    ]\r\n                                }\r\n                            },\r\n                            {xtype: 'splitter'},\r\n                            {\r\n                                xtype: 'button',\r\n                                text: 'Добавить',\r\n                                handler: function (btn) {\r\n                                    let editTools = Ext.getCmp('editTools');\r\n                                    let comboField = btn.ownerCt.down('combo');\r\n                                    let comboVal = comboField.getValue();\r\n\r\n                                    let fieldItems = undefined;\r\n\r\n                                    if (comboVal === 'cloneablePanel') {\r\n                                        fieldItems = {\r\n                                            xtype: 'fieldset',\r\n                                            title: 'Заголовок'\r\n                                        };\r\n                                    }\r\n\r\n                                    if (comboVal === 'cloneablePanelWithFill') {\r\n                                        comboVal = 'cloneablePanel';\r\n                                        fieldItems = {\r\n                                            xtype: 'fieldset',\r\n                                            title: 'Заголовок',\r\n                                            items: [\r\n                                                {\r\n                                                    xtype: 'fillButton',\r\n                                                    text: 'Заполнить из картотеки'\r\n                                                }\r\n                                            ]\r\n                                        };\r\n                                    }\r\n\r\n                                    if (comboVal === 'cloneableUpload') {\r\n                                        fieldItems = {\r\n                                            xtype: 'fileuploadpanel',\r\n                                            fieldName: 'cloneUpload',\r\n                                            text: 'Документ',\r\n                                            isLegalField: Ext.getCmp('legalCheckbox').checked,\r\n                                            isSoleField: Ext.getCmp('soleCheckbox').checked,\r\n                                            isPersonField: Ext.getCmp('personCheckbox').checked\r\n                                        };\r\n                                        comboVal = 'cloneablePanel';\r\n                                    }\r\n\r\n                                    let fieldName = (comboVal === 'cloneablePanel' || comboVal === 'label') ? editTools.getFieldName(comboVal) : undefined;\r\n                                    let fieldPrefix = comboVal === 'cloneablePanel' ? fieldName : undefined;\r\n                                    if (comboVal != null && comboVal !== '') {\r\n                                        editTools.constructField({\r\n                                            xtype: comboVal,\r\n                                            fieldLabel: comboVal !== 'label' ? comboField.getRawValue() : undefined,\r\n                                            html: comboVal === 'label' ? comboField.getRawValue() : undefined,\r\n                                            name: fieldName,\r\n                                            items: fieldItems,\r\n                                            prefix: fieldPrefix,\r\n                                            fieldName: fieldName\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        xtype: 'displayfield', value: 'Наборы полей:', hidden: ESFormEditorHelper.isEsFormEditor()\r\n                    },\r\n                    {\r\n                        xtype: 'fieldcontainer',\r\n                        layout: 'hbox',\r\n                        hidden: ESFormEditorHelper.isEsFormEditor(),\r\n                        items: [\r\n                            {\r\n                                xtype: 'combo',\r\n                                labelAlign: 'top',\r\n                                queryMode: \"local\",\r\n                                displayField: \"name\",\r\n                                valueField: \"value\",\r\n                                editable: false,\r\n                                flex: 1,\r\n                                listeners: {\r\n                                    added: function () {\r\n                                        let comboData = [];\r\n                                        for (let fieldset in CustomSituations.fieldsets) {\r\n                                            if (CustomSituations.fieldsets.hasOwnProperty(fieldset)) {\r\n                                                comboData.push({\r\n                                                    \"value\": fieldset,\r\n                                                    \"name\": CustomSituations.fieldsets[fieldset].situationLabel\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        Ext.data.StoreManager.lookup('situationsCombo').add(comboData);\r\n                                    }\r\n                                },\r\n                                store: {\r\n                                    storeId: \"situationsCombo\", \"fields\": [\"value\", \"name\"]\r\n                                }\r\n                            },\r\n                            {xtype: 'splitter'},\r\n                            {\r\n                                xtype: 'button',\r\n                                text: 'Добавить',\r\n                                handler: function (btn) {\r\n                                    let editTools = Ext.getCmp('editTools');\r\n                                    let comboVal = btn.ownerCt.down('combo').getValue();\r\n                                    let selectedField = document.querySelector('.fieldFocus');\r\n                                    if (selectedField && selectedField.id && selectedField.id.indexOf('cloneablePanel') !== -1) {\r\n                                        Ext.get(selectedField).removeCls('fieldFocus');\r\n                                    } else if (selectedField && selectedField.parentNode && selectedField.parentNode.id.indexOf('cloneablePanel') !== -1) {\r\n                                        Ext.get(selectedField).removeCls('fieldFocus');\r\n                                    }\r\n                                    if (comboVal != null) {\r\n                                        let currentFieldset = CustomSituations.fieldsets[comboVal];\r\n                                        let newFields;\r\n                                        if (currentFieldset.getReadOnlyFields\r\n                                            && configurationFullInfo.configuration.requesterFieldsReadOnly) {\r\n                                            newFields = currentFieldset.getReadOnlyFields();\r\n                                        } else {\r\n                                            newFields = currentFieldset.fields;\r\n                                        }\r\n                                        let editFormPanel = Ext.getCmp('editFormPanel'),\r\n                                            index;\r\n                                        if (selectedField) {\r\n                                            let field = Ext.getCmp(selectedField.id);\r\n                                            index = field.ownerCt.items.indexOf(field) + 1;\r\n                                        } else {\r\n                                            index = editFormPanel.items.length;\r\n                                        }\r\n                                        for (let fieldset in newFields) {\r\n                                            if (selectedField) {\r\n                                                let field = Ext.getCmp(selectedField.id);\r\n                                                index = editFormPanel.items.items.indexOf(field.up()) + 1 + parseInt(fieldset);\r\n                                            } else {\r\n                                                index = editFormPanel.items.length;\r\n                                            }\r\n                                            if (newFields.hasOwnProperty(fieldset)) {\r\n                                                editTools.constructField(newFields[fieldset], index);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id: 'editFormPanel',\r\n                itemId: 'editFormPanel',\r\n                xtype: 'form',\r\n                bodyStyle: 'border-radius:0',\r\n                height: '98%',\r\n                flex: 4,\r\n                layout: 'anchor',\r\n                border: 2,\r\n                autoScroll: true,\r\n                margin: 0,\r\n                defaults: {\r\n                    anchor: '100%',\r\n                    labelWidth: 200,\r\n                    margin: 5\r\n                },\r\n                updateLayout: function (options) {\r\n                    let me = this, defer, isRoot = options && options.isRoot;\r\n\r\n                    if (!me.rendered || me.layoutSuspendCount || me.suspendLayout) {\r\n                        return;\r\n                    }\r\n\r\n                    if (me.hidden) {\r\n                        Ext.AbstractComponent.cancelLayout(me);\r\n                    } else if (typeof isRoot !== 'boolean') {\r\n                        isRoot = me.isLayoutRoot();\r\n                    }\r\n\r\n                    if (isRoot || !me.ownerLayout || !me.ownerLayout.onContentChange(me)) {\r\n                        if (!me.isLayoutSuspended()) {\r\n                            defer = (options && options.hasOwnProperty('defer')) ? options.defer : me.deferLayouts;\r\n                            let bodyScroll = me.body.getScroll().top;\r\n                            bodyScroll !== 0 ? me.scroller = me.body.getScroll().top : null;\r\n                            Ext.AbstractComponent.updateLayout(me, defer);\r\n                            me.scroller !== 0 ? me.body.scrollTo('top', me.scroller) : null;\r\n                        }\r\n                    }\r\n                },\r\n                items: []\r\n            }\r\n\r\n        ]\r\n    });\r\n    mainPanel.render('placeholder');\r\n};\r\n\r\n\r\n/* #region atc */\r\nfunction download(filename, text) {\r\n    var element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n    element.setAttribute('download', filename);\r\n\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n\r\n    element.click();\r\n\r\n    document.body.removeChild(element);\r\n}\r\n/* #endregion atc */",
                "fileId": "f3",
                "fileType": "js",
                "injectLocation": "body",
                "on": true
            },
            {
                "type": "fileInject",
                "fileName": "FormEditor-custom.js",
                "file": "let completeLoaded = false;\n\nconsole.log('loaded');\nlet checkExist = setInterval(function() {\n    if (document.getElementById('button-1042')) {\n        console.log('button founded');\n        document.getElementById('button-1042').addEventListener('click', createServiceFile(), false);\n        clearInterval(checkExist);\n    }\n}, 100);\n\nlet loadFullDocument = setInterval(function() {\n    if (!completeLoaded) {\n        if (typeof Ext !== \"undefined\") { \n            if (typeof Ext.getCmp(\"getFormJSON\") !== \"undefined\") {\n                if (Ext.getCmp(\"getFormJSON\").getJSON().length > 0) {\n                    completeLoaded = true;\n                    createServiceFile();\n                }\n            }\n        }\n    }\n    \n}, 100);\n\nfunction createServiceFile() {\n    if (Ext.Object.fromQueryString(location.search).eid !== null) {\n        let is_mine = 0;\n\n        let template = Ext.getCmp(\"printTemplateButton\").printTemplateText;\n        \n        service = \"<ahk-json>\" + JSON.stringify(JSON.parse(\"[\" + Ext.getCmp(\"getFormJSON\").getJSON().toString() + \"]\"), null, 4) + \"</ahk-json>\";\n        service = service + \"<ahk-title>\" + Ext.getCmp('serviceTitle').value + \"</ahk-title>\";\n        service = service + \"<ahk-id>\" + Ext.Object.fromQueryString(location.search).eid + \"</ahk-id>\";\n        \n        if (template === \"\") {\n            let conTemplate = Ext.getCmp(\"conditionalPrintTemplateButton\").conditionalPrintTemplates;\n            if (conTemplate.length > 0) {\n                    let templates = \"\";\n                for (let i = 0; i < conTemplate.length; i++) {\n                    templates = templates + \"<ahk-template_\" + i + \">\";\n                    let name = \"<ahk-name>\" + conTemplate[i].fieldName + \"</ahk-name>\";\n                    let value = \"<ahk-value>\" + conTemplate[i].fieldValue + \"</ahk-value>\";\n                    templates = templates + name + value + \"<ahk-template>\" + conTemplate[i].htmlContent + \"</ahk-template>\";\n                    templates = templates + \"</ahk-template_\" + i + \">\";\n                    if (conTemplate[i].htmlContent.indexOf('applethecandy') != -1) { is_mine = 1 }\n                }\n                \n                service = service + \"<ahk-count>\" + conTemplate.length + \"</ahk-count>\";\n                service = service + templates;\n                service = service + \"<ahk-is_mine>\" + is_mine + \"</ahk-is_mine>\";\n                \n                download('service.txt', service);\n            }\n        } else {\n            if (template.indexOf('applethecandy') != -1) { is_mine = 1 }\n            \n            service = service + \"<ahk-count>1</ahk-count>\";\n            service = service + \"<ahk-template>\" + template + \"</ahk-template>\";\n            service = service + \"<ahk-is_mine>\" + is_mine + \"</ahk-is_mine>\";\n            \n            download('service.txt', service);\n        }\n    }\n    \n}\n\nfunction download(filename, text) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}",
                "fileId": "f2",
                "fileType": "js",
                "injectLocation": "head",
                "on": true
            }
        ],
        "on": true
    }]
}